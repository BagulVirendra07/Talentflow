{"ast":null,"code":"import { create } from \"zustand\";\nconst useAssessmentStore = create((set, get) => ({\n  assessments: [{\n    id: 1,\n    title: \"Frontend Assessment\",\n    sections: [{\n      id: 1,\n      title: \"React Basics\",\n      questions: [{\n        id: 1,\n        text: \"What is JSX?\",\n        type: \"shortText\",\n        required: true\n      }, {\n        id: 2,\n        text: \"What is a component?\",\n        type: \"longText\"\n      }, {\n        id: 3,\n        text: \"Hooks introduced in React?\",\n        type: \"multiChoice\",\n        options: [\"useState\", \"useEffect\", \"useFetch\", \"useLayoutEffect\"]\n      }, {\n        id: 4,\n        text: \"How do you pass data between components?\",\n        type: \"singleChoice\",\n        options: [\"props\", \"state\", \"context\"]\n      }, {\n        id: 5,\n        text: \"Upload a screenshot of output\",\n        type: \"file\"\n      }]\n    }]\n  }, {\n    id: 2,\n    title: \"Backend Assessment\",\n    sections: [{\n      id: 1,\n      title: \"Node & Express\",\n      questions: [{\n        id: 1,\n        text: \"What is middleware in Express?\",\n        type: \"shortText\"\n      }, {\n        id: 2,\n        text: \"Explain REST API?\",\n        type: \"longText\"\n      }, {\n        id: 3,\n        text: \"Which database you used?\",\n        type: \"singleChoice\",\n        options: [\"MongoDB\", \"MySQL\", \"PostgreSQL\"]\n      }, {\n        id: 4,\n        text: \"Status code for Not Found?\",\n        type: \"numeric\",\n        min: 400,\n        max: 500\n      }, {\n        id: 5,\n        text: \"Upload code screenshot\",\n        type: \"file\"\n      }]\n    }]\n  }, {\n    id: 3,\n    title: \"Database Assessment\",\n    sections: [{\n      id: 1,\n      title: \"SQL Concepts\",\n      questions: [{\n        id: 1,\n        text: \"Define normalization.\",\n        type: \"shortText\"\n      }, {\n        id: 2,\n        text: \"Write query to find top 5 students.\",\n        type: \"longText\"\n      }, {\n        id: 3,\n        text: \"Which is not a SQL constraint?\",\n        type: \"multiChoice\",\n        options: [\"UNIQUE\", \"PRIMARY\", \"MUTABLE\", \"CHECK\"]\n      }, {\n        id: 4,\n        text: \"Which key identifies a record uniquely?\",\n        type: \"singleChoice\",\n        options: [\"Foreign Key\", \"Primary Key\", \"Super Key\"]\n      }, {\n        id: 5,\n        text: \"Upload ER diagram\",\n        type: \"file\"\n      }]\n    }]\n  }],\n  selectedAssessment: null,\n  // Actions\n  addAssessment: title => {\n    const newAssessment = {\n      id: Date.now(),\n      title,\n      sections: []\n    };\n    set(state => ({\n      assessments: [...state.assessments, newAssessment]\n    }));\n  },\n  addSection: (assessmentId, title) => {\n    set(state => ({\n      assessments: state.assessments.map(a => a.id === assessmentId ? {\n        ...a,\n        sections: [...a.sections, {\n          id: Date.now(),\n          title,\n          questions: []\n        }]\n      } : a)\n    }));\n  },\n  addQuestion: (assessmentId, sectionId, question) => {\n    set(state => ({\n      assessments: state.assessments.map(a => a.id === assessmentId ? {\n        ...a,\n        sections: a.sections.map(s => s.id === sectionId ? {\n          ...s,\n          questions: [...s.questions, {\n            id: Date.now(),\n            ...question\n          }]\n        } : s)\n      } : a)\n    }));\n  },\n  selectAssessment: id => {\n    const selected = get().assessments.find(a => a.id === id);\n    set({\n      selectedAssessment: selected\n    });\n  }\n}));\nexport default useAssessmentStore;","map":{"version":3,"names":["create","useAssessmentStore","set","get","assessments","id","title","sections","questions","text","type","required","options","min","max","selectedAssessment","addAssessment","newAssessment","Date","now","state","addSection","assessmentId","map","a","addQuestion","sectionId","question","s","selectAssessment","selected","find"],"sources":["C:/Users/viren/Trial 2/src/components/Assessments/useAssessmentStore.js"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nconst useAssessmentStore = create((set, get) => ({\r\n  assessments: [\r\n    {\r\n      id: 1,\r\n      title: \"Frontend Assessment\",\r\n      sections: [\r\n        {\r\n          id: 1,\r\n          title: \"React Basics\",\r\n          questions: [\r\n            { id: 1, text: \"What is JSX?\", type: \"shortText\", required: true },\r\n            { id: 2, text: \"What is a component?\", type: \"longText\" },\r\n            { id: 3, text: \"Hooks introduced in React?\", type: \"multiChoice\", options: [\"useState\", \"useEffect\", \"useFetch\", \"useLayoutEffect\"] },\r\n            { id: 4, text: \"How do you pass data between components?\", type: \"singleChoice\", options: [\"props\", \"state\", \"context\"] },\r\n            { id: 5, text: \"Upload a screenshot of output\", type: \"file\" },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Backend Assessment\",\r\n      sections: [\r\n        {\r\n          id: 1,\r\n          title: \"Node & Express\",\r\n          questions: [\r\n            { id: 1, text: \"What is middleware in Express?\", type: \"shortText\" },\r\n            { id: 2, text: \"Explain REST API?\", type: \"longText\" },\r\n            { id: 3, text: \"Which database you used?\", type: \"singleChoice\", options: [\"MongoDB\", \"MySQL\", \"PostgreSQL\"] },\r\n            { id: 4, text: \"Status code for Not Found?\", type: \"numeric\", min: 400, max: 500 },\r\n            { id: 5, text: \"Upload code screenshot\", type: \"file\" },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Database Assessment\",\r\n      sections: [\r\n        {\r\n          id: 1,\r\n          title: \"SQL Concepts\",\r\n          questions: [\r\n            { id: 1, text: \"Define normalization.\", type: \"shortText\" },\r\n            { id: 2, text: \"Write query to find top 5 students.\", type: \"longText\" },\r\n            { id: 3, text: \"Which is not a SQL constraint?\", type: \"multiChoice\", options: [\"UNIQUE\", \"PRIMARY\", \"MUTABLE\", \"CHECK\"] },\r\n            { id: 4, text: \"Which key identifies a record uniquely?\", type: \"singleChoice\", options: [\"Foreign Key\", \"Primary Key\", \"Super Key\"] },\r\n            { id: 5, text: \"Upload ER diagram\", type: \"file\" },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n\r\n  selectedAssessment: null,\r\n\r\n  // Actions\r\n  addAssessment: (title) => {\r\n    const newAssessment = {\r\n      id: Date.now(),\r\n      title,\r\n      sections: [],\r\n    };\r\n    set((state) => ({ assessments: [...state.assessments, newAssessment] }));\r\n  },\r\n\r\n  addSection: (assessmentId, title) => {\r\n    set((state) => ({\r\n      assessments: state.assessments.map((a) =>\r\n        a.id === assessmentId\r\n          ? { ...a, sections: [...a.sections, { id: Date.now(), title, questions: [] }] }\r\n          : a\r\n      ),\r\n    }));\r\n  },\r\n\r\n  addQuestion: (assessmentId, sectionId, question) => {\r\n    set((state) => ({\r\n      assessments: state.assessments.map((a) =>\r\n        a.id === assessmentId\r\n          ? {\r\n              ...a,\r\n              sections: a.sections.map((s) =>\r\n                s.id === sectionId\r\n                  ? { ...s, questions: [...s.questions, { id: Date.now(), ...question }] }\r\n                  : s\r\n              ),\r\n            }\r\n          : a\r\n      ),\r\n    }));\r\n  },\r\n\r\n  selectAssessment: (id) => {\r\n    const selected = get().assessments.find((a) => a.id === id);\r\n    set({ selectedAssessment: selected });\r\n  },\r\n}));\r\n\r\nexport default useAssessmentStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}