{"ast":null,"code":"import { create } from \"zustand\";\nimport Dexie from \"dexie\";\nconst db = new Dexie(\"TalentFlowDB\");\ndb.version(1).stores({\n  assessments: \"++id,title,sections\"\n});\nconst seedData = async () => {\n  const count = await db.assessments.count();\n  if (count === 0) {\n    const sampleAssessments = [1, 2, 3].map(n => ({\n      title: `Assessment ${n}`,\n      sections: [{\n        name: `Section ${n}`,\n        questions: Array.from({\n          length: 10\n        }, (_, i) => ({\n          text: `Question ${i + 1} for Assessment ${n}`,\n          type: [\"short\", \"long\", \"single\", \"multi\", \"numeric\"][i % 5],\n          options: i % 5 === 2 ? [\"Option A\", \"Option B\", \"Option C\"] : i % 5 === 3 ? [\"Choice 1\", \"Choice 2\", \"Choice 3\"] : undefined,\n          min: 1,\n          max: 10\n        }))\n      }]\n    }));\n    await db.assessments.bulkAdd(sampleAssessments);\n    console.log(\"✅ Seeded 3 assessments with 10 questions each\");\n  }\n};\nexport const useAssessmentStore = create(set => ({\n  assessments: [],\n  fetchAssessments: async () => {\n    await seedData();\n    const data = await db.assessments.toArray();\n    set({\n      assessments: data\n    });\n  },\n  addAssessment: async title => {\n    const newA = {\n      title,\n      sections: [{\n        name: \"New Section\",\n        questions: []\n      }]\n    };\n    const id = await db.assessments.add(newA);\n    set(s => ({\n      assessments: [...s.assessments, {\n        id,\n        ...newA\n      }]\n    }));\n  }\n}));","map":{"version":3,"names":["create","Dexie","db","version","stores","assessments","seedData","count","sampleAssessments","map","n","title","sections","name","questions","Array","from","length","_","i","text","type","options","undefined","min","max","bulkAdd","console","log","useAssessmentStore","set","fetchAssessments","data","toArray","addAssessment","newA","id","add","s"],"sources":["C:/Users/viren/Trial 2/src/components/Assessments/useAssessmentStore.js"],"sourcesContent":["import { create } from \"zustand\";\r\nimport Dexie from \"dexie\";\r\n\r\nconst db = new Dexie(\"TalentFlowDB\");\r\ndb.version(1).stores({ assessments: \"++id,title,sections\" });\r\n\r\nconst seedData = async () => {\r\n  const count = await db.assessments.count();\r\n  if (count === 0) {\r\n    const sampleAssessments = [1, 2, 3].map((n) => ({\r\n      title: `Assessment ${n}`,\r\n      sections: [\r\n        {\r\n          name: `Section ${n}`,\r\n          questions: Array.from({ length: 10 }, (_, i) => ({\r\n            text: `Question ${i + 1} for Assessment ${n}`,\r\n            type: [\"short\", \"long\", \"single\", \"multi\", \"numeric\"][i % 5],\r\n            options:\r\n              i % 5 === 2\r\n                ? [\"Option A\", \"Option B\", \"Option C\"]\r\n                : i % 5 === 3\r\n                ? [\"Choice 1\", \"Choice 2\", \"Choice 3\"]\r\n                : undefined,\r\n            min: 1,\r\n            max: 10,\r\n          })),\r\n        },\r\n      ],\r\n    }));\r\n    await db.assessments.bulkAdd(sampleAssessments);\r\n    console.log(\"✅ Seeded 3 assessments with 10 questions each\");\r\n  }\r\n};\r\n\r\nexport const useAssessmentStore = create((set) => ({\r\n  assessments: [],\r\n  fetchAssessments: async () => {\r\n    await seedData();\r\n    const data = await db.assessments.toArray();\r\n    set({ assessments: data });\r\n  },\r\n  addAssessment: async (title) => {\r\n    const newA = {\r\n      title,\r\n      sections: [{ name: \"New Section\", questions: [] }],\r\n    };\r\n    const id = await db.assessments.add(newA);\r\n    set((s) => ({ assessments: [...s.assessments, { id, ...newA }] }));\r\n  },\r\n}));\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,EAAE,GAAG,IAAID,KAAK,CAAC,cAAc,CAAC;AACpCC,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC;EAAEC,WAAW,EAAE;AAAsB,CAAC,CAAC;AAE5D,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAC3B,MAAMC,KAAK,GAAG,MAAML,EAAE,CAACG,WAAW,CAACE,KAAK,CAAC,CAAC;EAC1C,IAAIA,KAAK,KAAK,CAAC,EAAE;IACf,MAAMC,iBAAiB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,CAAC,KAAM;MAC9CC,KAAK,EAAE,cAAcD,CAAC,EAAE;MACxBE,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,WAAWH,CAAC,EAAE;QACpBI,SAAS,EAAEC,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,MAAM;UAC/CC,IAAI,EAAE,YAAYD,CAAC,GAAG,CAAC,mBAAmBT,CAAC,EAAE;UAC7CW,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,CAACF,CAAC,GAAG,CAAC,CAAC;UAC5DG,OAAO,EACLH,CAAC,GAAG,CAAC,KAAK,CAAC,GACP,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,GACpCA,CAAC,GAAG,CAAC,KAAK,CAAC,GACX,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,GACpCI,SAAS;UACfC,GAAG,EAAE,CAAC;UACNC,GAAG,EAAE;QACP,CAAC,CAAC;MACJ,CAAC;IAEL,CAAC,CAAC,CAAC;IACH,MAAMvB,EAAE,CAACG,WAAW,CAACqB,OAAO,CAAClB,iBAAiB,CAAC;IAC/CmB,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;EAC9D;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG7B,MAAM,CAAE8B,GAAG,KAAM;EACjDzB,WAAW,EAAE,EAAE;EACf0B,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,MAAMzB,QAAQ,CAAC,CAAC;IAChB,MAAM0B,IAAI,GAAG,MAAM9B,EAAE,CAACG,WAAW,CAAC4B,OAAO,CAAC,CAAC;IAC3CH,GAAG,CAAC;MAAEzB,WAAW,EAAE2B;IAAK,CAAC,CAAC;EAC5B,CAAC;EACDE,aAAa,EAAE,MAAOvB,KAAK,IAAK;IAC9B,MAAMwB,IAAI,GAAG;MACXxB,KAAK;MACLC,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,aAAa;QAAEC,SAAS,EAAE;MAAG,CAAC;IACnD,CAAC;IACD,MAAMsB,EAAE,GAAG,MAAMlC,EAAE,CAACG,WAAW,CAACgC,GAAG,CAACF,IAAI,CAAC;IACzCL,GAAG,CAAEQ,CAAC,KAAM;MAAEjC,WAAW,EAAE,CAAC,GAAGiC,CAAC,CAACjC,WAAW,EAAE;QAAE+B,EAAE;QAAE,GAAGD;MAAK,CAAC;IAAE,CAAC,CAAC,CAAC;EACpE;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}