{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\viren\\\\Trial 2\\\\src\\\\components\\\\Candidates\\\\CandidatesBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { DndContext, closestCenter } from \"@dnd-kit/core\";\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { db } from \"../../db/\";\nimport CandidateCard from \"./CandidateCard\";\nimport StageColumn from \"./StageColumn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [\"applied\", \"screen\", \"tech\", \"offer\", \"hired\", \"rejected\"];\nexport default function CandidatesBoard() {\n  _s();\n  const [activeId, setActiveId] = useState(null);\n  const candidates = useLiveQuery(() => db.candidates.toArray(), []);\n  const grouped = stages.reduce((acc, stage) => {\n    acc[stage] = (candidates === null || candidates === void 0 ? void 0 : candidates.filter(c => c.stage === stage)) || [];\n    return acc;\n  }, {});\n  async function handleDragEnd(event) {\n    var _active$data$current;\n    const {\n      active,\n      over\n    } = event;\n    if (!over) return;\n    const fromStage = (_active$data$current = active.data.current) === null || _active$data$current === void 0 ? void 0 : _active$data$current.stage;\n    const toStage = over.id;\n    if (fromStage !== toStage) {\n      await db.candidates.update(active.id, {\n        stage: toStage\n      });\n      await db.timelines.add({\n        candidateId: active.id,\n        stage: toStage,\n        date: new Date().toISOString()\n      });\n    }\n  }\n  if (!candidates) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-center mt-6\",\n    children: \"Loading candidates...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 grid grid-cols-6 gap-4\",\n    children: /*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: closestCenter,\n      onDragEnd: handleDragEnd,\n      children: stages.map(stage => /*#__PURE__*/_jsxDEV(SortableContext, {\n        id: stage,\n        items: grouped[stage].map(c => c.id),\n        strategy: verticalListSortingStrategy,\n        children: /*#__PURE__*/_jsxDEV(StageColumn, {\n          id: stage,\n          title: stage.toUpperCase(),\n          children: grouped[stage].map(candidate => /*#__PURE__*/_jsxDEV(CandidateCard, {\n            candidate: candidate\n          }, candidate.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, stage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(CandidatesBoard, \"3UDQIROjUzS5Z8hUSTkegWWrPRI=\", false, function () {\n  return [useLiveQuery];\n});\n_c = CandidatesBoard;\nvar _c;\n$RefreshReg$(_c, \"CandidatesBoard\");","map":{"version":3,"names":["React","useEffect","useState","DndContext","closestCenter","arrayMove","SortableContext","verticalListSortingStrategy","useLiveQuery","db","CandidateCard","StageColumn","jsxDEV","_jsxDEV","stages","CandidatesBoard","_s","activeId","setActiveId","candidates","toArray","grouped","reduce","acc","stage","filter","c","handleDragEnd","event","_active$data$current","active","over","fromStage","data","current","toStage","id","update","timelines","add","candidateId","date","Date","toISOString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","collisionDetection","onDragEnd","map","items","strategy","title","toUpperCase","candidate","_c","$RefreshReg$"],"sources":["C:/Users/viren/Trial 2/src/components/Candidates/CandidatesBoard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DndContext, closestCenter } from \"@dnd-kit/core\";\r\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport { db } from \"../../db/\";\r\nimport CandidateCard from \"./CandidateCard\";\r\nimport StageColumn from \"./StageColumn\";\r\n\r\n\r\n\r\n\r\nconst stages = [\"applied\", \"screen\", \"tech\", \"offer\", \"hired\", \"rejected\"];\r\n\r\nexport default function CandidatesBoard() {\r\n  const [activeId, setActiveId] = useState(null);\r\n  const candidates = useLiveQuery(() => db.candidates.toArray(), []);\r\n\r\n  const grouped = stages.reduce((acc, stage) => {\r\n    acc[stage] = candidates?.filter(c => c.stage === stage) || [];\r\n    return acc;\r\n  }, {});\r\n\r\n  async function handleDragEnd(event) {\r\n    const { active, over } = event;\r\n    if (!over) return;\r\n\r\n    const fromStage = active.data.current?.stage;\r\n    const toStage = over.id;\r\n\r\n    if (fromStage !== toStage) {\r\n      await db.candidates.update(active.id, { stage: toStage });\r\n      await db.timelines.add({\r\n        candidateId: active.id,\r\n        stage: toStage,\r\n        date: new Date().toISOString(),\r\n      });\r\n    }\r\n  }\r\n\r\n  if (!candidates) return <p className=\"text-center mt-6\">Loading candidates...</p>;\r\n\r\n  return (\r\n    <div className=\"p-4 grid grid-cols-6 gap-4\">\r\n      <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\r\n        {stages.map(stage => (\r\n          <SortableContext\r\n            key={stage}\r\n            id={stage}\r\n            items={grouped[stage].map(c => c.id)}\r\n            strategy={verticalListSortingStrategy}\r\n          >\r\n            <StageColumn id={stage} title={stage.toUpperCase()}>\r\n              {grouped[stage].map(candidate => (\r\n                <CandidateCard key={candidate.id} candidate={candidate} />\r\n              ))}\r\n            </StageColumn>\r\n          </SortableContext>\r\n        ))}\r\n      </DndContext>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}