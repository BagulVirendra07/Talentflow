{"ast":null,"code":"import Dexie from 'dexie';\n\n// 1️⃣ Create and define the database\nexport const db = new Dexie('TalentFlowDB');\ndb.version(1).stores({\n  jobs: '++id, title, slug, status, tags, order',\n  // jobs list\n  candidates: '++id, name, email, stage, jobId',\n  // candidates per job\n  timelines: '++id, candidateId, stage, date',\n  // candidate movement timeline\n  assessments: '++id, jobId, title',\n  // assessments per job\n  questions: '++id, assessmentId, text, type, required',\n  // assessment questions\n  submissions: '++id, jobId, name, answers, submittedAt' // assessment submissions\n});\n\n// 2️⃣ Utility: Simulate latency\nexport const latency = (min = 200, max = 1200) => new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * (max - min + 1)) + min));\n\n// 3️⃣ Utility: Simulate write failure (7%)\nexport const maybeFail = () => Math.random() < 0.07;\n\n// 4️⃣ Seed initial data for testing\nexport async function seedData() {\n  // 🧩 Jobs\n  const jobsCount = await db.jobs.count();\n  if (jobsCount === 0) {\n    const jobs = Array.from({\n      length: 25\n    }, (_, i) => ({\n      title: `Job ${i + 1}`,\n      slug: `job-${i + 1}`,\n      status: Math.random() > 0.3 ? 'active' : 'archived',\n      tags: ['frontend', 'backend', 'remote'],\n      order: i + 1\n    }));\n    await db.jobs.bulkAdd(jobs);\n  }\n\n  // 👥 Candidates\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n  const candidatesCount = await db.candidates.count();\n  if (candidatesCount === 0) {\n    const candidates = Array.from({\n      length: 1000\n    }, (_, i) => ({\n      name: `Candidate ${i + 1}`,\n      email: `candidate${i + 1}@example.com`,\n      stage: stages[Math.floor(Math.random() * stages.length)],\n      jobId: Math.floor(Math.random() * 25) + 1\n    }));\n    await db.candidates.bulkAdd(candidates);\n  }\n\n  // 🧠 Assessments for first 3 jobs\n  const assessmentsCount = await db.assessments.count();\n  if (assessmentsCount === 0) {\n    for (let jobId = 1; jobId <= 3; jobId++) {\n      const assessmentId = await db.assessments.add({\n        jobId,\n        title: `Assessment for Job ${jobId}`\n      });\n      const questions = Array.from({\n        length: 12\n      }, (_, q) => ({\n        assessmentId,\n        text: `Question ${q + 1} for Job ${jobId}`,\n        type: 'short-text',\n        required: true\n      }));\n      await db.questions.bulkAdd(questions);\n    }\n  }\n}","map":{"version":3,"names":["Dexie","db","version","stores","jobs","candidates","timelines","assessments","questions","submissions","latency","min","max","Promise","resolve","setTimeout","Math","floor","random","maybeFail","seedData","jobsCount","count","Array","from","length","_","i","title","slug","status","tags","order","bulkAdd","stages","candidatesCount","name","email","stage","jobId","assessmentsCount","assessmentId","add","q","text","type","required"],"sources":["C:/Users/viren/Trial 2/src/db/dexie.js"],"sourcesContent":["import Dexie from 'dexie';\r\n\r\n// 1️⃣ Create and define the database\r\nexport const db = new Dexie('TalentFlowDB');\r\n\r\ndb.version(1).stores({\r\n  jobs: '++id, title, slug, status, tags, order',      // jobs list\r\n  candidates: '++id, name, email, stage, jobId',       // candidates per job\r\n  timelines: '++id, candidateId, stage, date',         // candidate movement timeline\r\n  assessments: '++id, jobId, title',                   // assessments per job\r\n  questions: '++id, assessmentId, text, type, required', // assessment questions\r\n  submissions: '++id, jobId, name, answers, submittedAt' // assessment submissions\r\n});\r\n\r\n// 2️⃣ Utility: Simulate latency\r\nexport const latency = (min = 200, max = 1200) =>\r\n  new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * (max - min + 1)) + min));\r\n\r\n// 3️⃣ Utility: Simulate write failure (7%)\r\nexport const maybeFail = () => Math.random() < 0.07;\r\n\r\n// 4️⃣ Seed initial data for testing\r\nexport async function seedData() {\r\n  // 🧩 Jobs\r\n  const jobsCount = await db.jobs.count();\r\n  if (jobsCount === 0) {\r\n    const jobs = Array.from({ length: 25 }, (_, i) => ({\r\n      title: `Job ${i + 1}`,\r\n      slug: `job-${i + 1}`,\r\n      status: Math.random() > 0.3 ? 'active' : 'archived',\r\n      tags: ['frontend', 'backend', 'remote'],\r\n      order: i + 1,\r\n    }));\r\n    await db.jobs.bulkAdd(jobs);\r\n  }\r\n\r\n  // 👥 Candidates\r\n  const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n  const candidatesCount = await db.candidates.count();\r\n  if (candidatesCount === 0) {\r\n    const candidates = Array.from({ length: 1000 }, (_, i) => ({\r\n      name: `Candidate ${i + 1}`,\r\n      email: `candidate${i + 1}@example.com`,\r\n      stage: stages[Math.floor(Math.random() * stages.length)],\r\n      jobId: Math.floor(Math.random() * 25) + 1,\r\n    }));\r\n    await db.candidates.bulkAdd(candidates);\r\n  }\r\n\r\n  // 🧠 Assessments for first 3 jobs\r\n  const assessmentsCount = await db.assessments.count();\r\n  if (assessmentsCount === 0) {\r\n    for (let jobId = 1; jobId <= 3; jobId++) {\r\n      const assessmentId = await db.assessments.add({\r\n        jobId,\r\n        title: `Assessment for Job ${jobId}`,\r\n      });\r\n\r\n      const questions = Array.from({ length: 12 }, (_, q) => ({\r\n        assessmentId,\r\n        text: `Question ${q + 1} for Job ${jobId}`,\r\n        type: 'short-text',\r\n        required: true,\r\n      }));\r\n\r\n      await db.questions.bulkAdd(questions);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}