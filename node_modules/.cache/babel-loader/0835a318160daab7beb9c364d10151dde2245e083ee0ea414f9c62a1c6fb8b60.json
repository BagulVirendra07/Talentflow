{"ast":null,"code":"import { create } from \"zustand\";\nexport const useAssessmentStore = create(set => ({\n  assessments: [],\n  fetchAssessments: () => {\n    const defaultAssessments = [{\n      id: 1,\n      title: \"Frontend Assessment\",\n      sections: [{\n        name: \"Section 1\",\n        questions: []\n      }]\n    }];\n    set({\n      assessments: defaultAssessments\n    });\n  },\n  addAssessment: title => set(state => ({\n    assessments: [...state.assessments, {\n      id: state.assessments.length + 1,\n      title,\n      sections: [{\n        name: \"Section 1\",\n        questions: []\n      }]\n    }]\n  })),\n  addQuestion: (assessmentId, sectionName, question) => set(state => ({\n    assessments: state.assessments.map(a => a.id === assessmentId ? {\n      ...a,\n      sections: a.sections.map(s => s.name === sectionName ? {\n        ...s,\n        questions: [...s.questions, question]\n      } : s)\n    } : a)\n  }))\n}));","map":{"version":3,"names":["create","useAssessmentStore","set","assessments","fetchAssessments","defaultAssessments","id","title","sections","name","questions","addAssessment","state","length","addQuestion","assessmentId","sectionName","question","map","a","s"],"sources":["C:/Users/viren/Trial 2/src/components/Assessments/useAssessmentStore.js"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nexport const useAssessmentStore = create((set) => ({\r\n  assessments: [],\r\n\r\n  fetchAssessments: () => {\r\n    const defaultAssessments = [\r\n      {\r\n        id: 1,\r\n        title: \"Frontend Assessment\",\r\n        sections: [\r\n          {\r\n            name: \"Section 1\",\r\n            questions: [],\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n    set({ assessments: defaultAssessments });\r\n  },\r\n\r\n  addAssessment: (title) =>\r\n    set((state) => ({\r\n      assessments: [\r\n        ...state.assessments,\r\n        {\r\n          id: state.assessments.length + 1,\r\n          title,\r\n          sections: [{ name: \"Section 1\", questions: [] }],\r\n        },\r\n      ],\r\n    })),\r\n\r\n  addQuestion: (assessmentId, sectionName, question) =>\r\n    set((state) => ({\r\n      assessments: state.assessments.map((a) =>\r\n        a.id === assessmentId\r\n          ? {\r\n              ...a,\r\n              sections: a.sections.map((s) =>\r\n                s.name === sectionName\r\n                  ? { ...s, questions: [...s.questions, question] }\r\n                  : s\r\n              ),\r\n            }\r\n          : a\r\n      ),\r\n    })),\r\n}));\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC,OAAO,MAAMC,kBAAkB,GAAGD,MAAM,CAAEE,GAAG,KAAM;EACjDC,WAAW,EAAE,EAAE;EAEfC,gBAAgB,EAAEA,CAAA,KAAM;IACtB,MAAMC,kBAAkB,GAAG,CACzB;MACEC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,qBAAqB;MAC5BC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,WAAW;QACjBC,SAAS,EAAE;MACb,CAAC;IAEL,CAAC,CACF;IACDR,GAAG,CAAC;MAAEC,WAAW,EAAEE;IAAmB,CAAC,CAAC;EAC1C,CAAC;EAEDM,aAAa,EAAGJ,KAAK,IACnBL,GAAG,CAAEU,KAAK,KAAM;IACdT,WAAW,EAAE,CACX,GAAGS,KAAK,CAACT,WAAW,EACpB;MACEG,EAAE,EAAEM,KAAK,CAACT,WAAW,CAACU,MAAM,GAAG,CAAC;MAChCN,KAAK;MACLC,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,WAAW;QAAEC,SAAS,EAAE;MAAG,CAAC;IACjD,CAAC;EAEL,CAAC,CAAC,CAAC;EAELI,WAAW,EAAEA,CAACC,YAAY,EAAEC,WAAW,EAAEC,QAAQ,KAC/Cf,GAAG,CAAEU,KAAK,KAAM;IACdT,WAAW,EAAES,KAAK,CAACT,WAAW,CAACe,GAAG,CAAEC,CAAC,IACnCA,CAAC,CAACb,EAAE,KAAKS,YAAY,GACjB;MACE,GAAGI,CAAC;MACJX,QAAQ,EAAEW,CAAC,CAACX,QAAQ,CAACU,GAAG,CAAEE,CAAC,IACzBA,CAAC,CAACX,IAAI,KAAKO,WAAW,GAClB;QAAE,GAAGI,CAAC;QAAEV,SAAS,EAAE,CAAC,GAAGU,CAAC,CAACV,SAAS,EAAEO,QAAQ;MAAE,CAAC,GAC/CG,CACN;IACF,CAAC,GACDD,CACN;EACF,CAAC,CAAC;AACN,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}