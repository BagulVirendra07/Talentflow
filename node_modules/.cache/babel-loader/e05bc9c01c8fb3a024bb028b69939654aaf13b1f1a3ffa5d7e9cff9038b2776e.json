{"ast":null,"code":"// src/db.js\nimport Dexie from \"dexie\";\nexport const db = new Dexie(\"TalentFlowDB\");\ndb.version(1).stores({\n  jobs: \"++id, title, status, order\",\n  candidates: \"++id, name, email, stage, jobId\",\n  assessments: \"++id, title\",\n  questions: \"++id, assessmentId, text\"\n});\nasync function seedData() {\n  const jobCount = await db.jobs.count();\n  if (jobCount === 0) {\n    const stages = [\"applied\", \"screen\", \"tech\", \"offer\", \"hired\", \"rejected\"];\n    const status = [\"active\", \"archived\"];\n\n    // 25 Jobs\n    for (let i = 1; i <= 25; i++) {\n      await db.jobs.add({\n        title: `Job ${i}`,\n        status: status[Math.floor(Math.random() * status.length)],\n        order: i\n      });\n    }\n\n    // 1000 Candidates\n    for (let i = 1; i <= 1000; i++) {\n      const jobId = Math.floor(Math.random() * 25) + 1;\n      const stage = stages[Math.floor(Math.random() * stages.length)];\n      await db.candidates.add({\n        name: `Candidate ${i}`,\n        email: `candidate${i}@example.com`,\n        stage,\n        jobId\n      });\n    }\n\n    // ✅ 3 Assessments with 12 Questions Each\n    for (let i = 1; i <= 3; i++) {\n      const assessmentId = await db.assessments.add({\n        title: `Assessment ${i}`\n      });\n      for (let q = 1; q <= 12; q++) {\n        await db.questions.add({\n          assessmentId,\n          text: `Question ${q} for Assessment ${i}`\n        });\n      }\n    }\n    console.log(\"✅ Seed data created (25 jobs, 1000 candidates, 3 assessments × 12 questions)\");\n  }\n}\nseedData();","map":{"version":3,"names":["Dexie","db","version","stores","jobs","candidates","assessments","questions","seedData","jobCount","count","stages","status","i","add","title","Math","floor","random","length","order","jobId","stage","name","email","assessmentId","q","text","console","log"],"sources":["C:/Users/viren/Trial 2/src/hooks/db.js"],"sourcesContent":["// src/db.js\r\nimport Dexie from \"dexie\";\r\n\r\nexport const db = new Dexie(\"TalentFlowDB\");\r\n\r\ndb.version(1).stores({\r\n  jobs: \"++id, title, status, order\",\r\n  candidates: \"++id, name, email, stage, jobId\",\r\n  assessments: \"++id, title\",\r\n  questions: \"++id, assessmentId, text\"\r\n});\r\n\r\nasync function seedData() {\r\n  const jobCount = await db.jobs.count();\r\n  if (jobCount === 0) {\r\n    const stages = [\"applied\", \"screen\", \"tech\", \"offer\", \"hired\", \"rejected\"];\r\n    const status = [\"active\", \"archived\"];\r\n\r\n    // 25 Jobs\r\n    for (let i = 1; i <= 25; i++) {\r\n      await db.jobs.add({\r\n        title: `Job ${i}`,\r\n        status: status[Math.floor(Math.random() * status.length)],\r\n        order: i\r\n      });\r\n    }\r\n\r\n    // 1000 Candidates\r\n    for (let i = 1; i <= 1000; i++) {\r\n      const jobId = Math.floor(Math.random() * 25) + 1;\r\n      const stage = stages[Math.floor(Math.random() * stages.length)];\r\n      await db.candidates.add({\r\n        name: `Candidate ${i}`,\r\n        email: `candidate${i}@example.com`,\r\n        stage,\r\n        jobId\r\n      });\r\n    }\r\n\r\n    // ✅ 3 Assessments with 12 Questions Each\r\n    for (let i = 1; i <= 3; i++) {\r\n      const assessmentId = await db.assessments.add({ title: `Assessment ${i}` });\r\n      for (let q = 1; q <= 12; q++) {\r\n        await db.questions.add({\r\n          assessmentId,\r\n          text: `Question ${q} for Assessment ${i}`\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log(\"✅ Seed data created (25 jobs, 1000 candidates, 3 assessments × 12 questions)\");\r\n  }\r\n}\r\n\r\nseedData();\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,EAAE,GAAG,IAAID,KAAK,CAAC,cAAc,CAAC;AAE3CC,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC;EACnBC,IAAI,EAAE,4BAA4B;EAClCC,UAAU,EAAE,iCAAiC;EAC7CC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE;AACb,CAAC,CAAC;AAEF,eAAeC,QAAQA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMR,EAAE,CAACG,IAAI,CAACM,KAAK,CAAC,CAAC;EACtC,IAAID,QAAQ,KAAK,CAAC,EAAE;IAClB,MAAME,MAAM,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC;IAC1E,MAAMC,MAAM,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC;;IAErC;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC5B,MAAMZ,EAAE,CAACG,IAAI,CAACU,GAAG,CAAC;QAChBC,KAAK,EAAE,OAAOF,CAAC,EAAE;QACjBD,MAAM,EAAEA,MAAM,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,MAAM,CAACO,MAAM,CAAC,CAAC;QACzDC,KAAK,EAAEP;MACT,CAAC,CAAC;IACJ;;IAEA;IACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,EAAEA,CAAC,EAAE,EAAE;MAC9B,MAAMQ,KAAK,GAAGL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;MAChD,MAAMI,KAAK,GAAGX,MAAM,CAACK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGP,MAAM,CAACQ,MAAM,CAAC,CAAC;MAC/D,MAAMlB,EAAE,CAACI,UAAU,CAACS,GAAG,CAAC;QACtBS,IAAI,EAAE,aAAaV,CAAC,EAAE;QACtBW,KAAK,EAAE,YAAYX,CAAC,cAAc;QAClCS,KAAK;QACLD;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMY,YAAY,GAAG,MAAMxB,EAAE,CAACK,WAAW,CAACQ,GAAG,CAAC;QAAEC,KAAK,EAAE,cAAcF,CAAC;MAAG,CAAC,CAAC;MAC3E,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC5B,MAAMzB,EAAE,CAACM,SAAS,CAACO,GAAG,CAAC;UACrBW,YAAY;UACZE,IAAI,EAAE,YAAYD,CAAC,mBAAmBb,CAAC;QACzC,CAAC,CAAC;MACJ;IACF;IAEAe,OAAO,CAACC,GAAG,CAAC,8EAA8E,CAAC;EAC7F;AACF;AAEArB,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}