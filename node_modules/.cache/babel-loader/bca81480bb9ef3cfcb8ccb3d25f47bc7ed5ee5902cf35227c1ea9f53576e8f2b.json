{"ast":null,"code":"import { create } from \"zustand\";\nimport Dexie from \"dexie\";\n\n// ✅ Create or open IndexedDB\nexport const db = new Dexie(\"TalentFlowDB\");\ndb.version(1).stores({\n  assessments: \"++id,title,sections\"\n});\nexport const useAssessmentStore = create((set, get) => ({\n  assessments: [],\n  selectedAssessment: null,\n  // ✅ Fetch assessments\n  fetchAssessments: async () => {\n    try {\n      const data = await db.assessments.toArray();\n      set({\n        assessments: data\n      });\n    } catch (error) {\n      console.error(\"Error fetching assessments:\", error);\n    }\n  },\n  // ✅ Add new assessment\n  addAssessment: async assessment => {\n    try {\n      const id = await db.assessments.add(assessment);\n      const newA = {\n        id,\n        ...assessment\n      };\n      set(state => ({\n        assessments: [...state.assessments, newA]\n      }));\n    } catch (error) {\n      console.error(\"Error adding assessment:\", error);\n    }\n  },\n  // ✅ Update assessment\n  updateAssessment: async (id, updatedData) => {\n    try {\n      await db.assessments.update(id, updatedData);\n      set(state => ({\n        assessments: state.assessments.map(a => a.id === id ? {\n          ...a,\n          ...updatedData\n        } : a)\n      }));\n    } catch (error) {\n      console.error(\"Error updating assessment:\", error);\n    }\n  },\n  // ✅ Delete assessment\n  deleteAssessment: async id => {\n    try {\n      await db.assessments.delete(id);\n      set(state => ({\n        assessments: state.assessments.filter(a => a.id !== id)\n      }));\n    } catch (error) {\n      console.error(\"Error deleting assessment:\", error);\n    }\n  },\n  // ✅ Select assessment (for modal)\n  setSelectedAssessment: assessment => set({\n    selectedAssessment: assessment\n  })\n}));","map":{"version":3,"names":["create","Dexie","db","version","stores","assessments","useAssessmentStore","set","get","selectedAssessment","fetchAssessments","data","toArray","error","console","addAssessment","assessment","id","add","newA","state","updateAssessment","updatedData","update","map","a","deleteAssessment","delete","filter","setSelectedAssessment"],"sources":["C:/Users/viren/Trial 2/src/components/Assessments/useAssessmentStore.js"],"sourcesContent":["import { create } from \"zustand\";\r\nimport Dexie from \"dexie\";\r\n\r\n// ✅ Create or open IndexedDB\r\nexport const db = new Dexie(\"TalentFlowDB\");\r\ndb.version(1).stores({\r\n  assessments: \"++id,title,sections\",\r\n});\r\n\r\nexport const useAssessmentStore = create((set, get) => ({\r\n  assessments: [],\r\n  selectedAssessment: null,\r\n\r\n  // ✅ Fetch assessments\r\n  fetchAssessments: async () => {\r\n    try {\r\n      const data = await db.assessments.toArray();\r\n      set({ assessments: data });\r\n    } catch (error) {\r\n      console.error(\"Error fetching assessments:\", error);\r\n    }\r\n  },\r\n\r\n  // ✅ Add new assessment\r\n  addAssessment: async (assessment) => {\r\n    try {\r\n      const id = await db.assessments.add(assessment);\r\n      const newA = { id, ...assessment };\r\n      set((state) => ({ assessments: [...state.assessments, newA] }));\r\n    } catch (error) {\r\n      console.error(\"Error adding assessment:\", error);\r\n    }\r\n  },\r\n\r\n  // ✅ Update assessment\r\n  updateAssessment: async (id, updatedData) => {\r\n    try {\r\n      await db.assessments.update(id, updatedData);\r\n      set((state) => ({\r\n        assessments: state.assessments.map((a) =>\r\n          a.id === id ? { ...a, ...updatedData } : a\r\n        ),\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Error updating assessment:\", error);\r\n    }\r\n  },\r\n\r\n  // ✅ Delete assessment\r\n  deleteAssessment: async (id) => {\r\n    try {\r\n      await db.assessments.delete(id);\r\n      set((state) => ({\r\n        assessments: state.assessments.filter((a) => a.id !== id),\r\n      }));\r\n    } catch (error) {\r\n      console.error(\"Error deleting assessment:\", error);\r\n    }\r\n  },\r\n\r\n  // ✅ Select assessment (for modal)\r\n  setSelectedAssessment: (assessment) => set({ selectedAssessment: assessment }),\r\n}));\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,EAAE,GAAG,IAAID,KAAK,CAAC,cAAc,CAAC;AAC3CC,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC;EACnBC,WAAW,EAAE;AACf,CAAC,CAAC;AAEF,OAAO,MAAMC,kBAAkB,GAAGN,MAAM,CAAC,CAACO,GAAG,EAAEC,GAAG,MAAM;EACtDH,WAAW,EAAE,EAAE;EACfI,kBAAkB,EAAE,IAAI;EAExB;EACAC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMT,EAAE,CAACG,WAAW,CAACO,OAAO,CAAC,CAAC;MAC3CL,GAAG,CAAC;QAAEF,WAAW,EAAEM;MAAK,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED;EACAE,aAAa,EAAE,MAAOC,UAAU,IAAK;IACnC,IAAI;MACF,MAAMC,EAAE,GAAG,MAAMf,EAAE,CAACG,WAAW,CAACa,GAAG,CAACF,UAAU,CAAC;MAC/C,MAAMG,IAAI,GAAG;QAAEF,EAAE;QAAE,GAAGD;MAAW,CAAC;MAClCT,GAAG,CAAEa,KAAK,KAAM;QAAEf,WAAW,EAAE,CAAC,GAAGe,KAAK,CAACf,WAAW,EAAEc,IAAI;MAAE,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED;EACAQ,gBAAgB,EAAE,MAAAA,CAAOJ,EAAE,EAAEK,WAAW,KAAK;IAC3C,IAAI;MACF,MAAMpB,EAAE,CAACG,WAAW,CAACkB,MAAM,CAACN,EAAE,EAAEK,WAAW,CAAC;MAC5Cf,GAAG,CAAEa,KAAK,KAAM;QACdf,WAAW,EAAEe,KAAK,CAACf,WAAW,CAACmB,GAAG,CAAEC,CAAC,IACnCA,CAAC,CAACR,EAAE,KAAKA,EAAE,GAAG;UAAE,GAAGQ,CAAC;UAAE,GAAGH;QAAY,CAAC,GAAGG,CAC3C;MACF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED;EACAa,gBAAgB,EAAE,MAAOT,EAAE,IAAK;IAC9B,IAAI;MACF,MAAMf,EAAE,CAACG,WAAW,CAACsB,MAAM,CAACV,EAAE,CAAC;MAC/BV,GAAG,CAAEa,KAAK,KAAM;QACdf,WAAW,EAAEe,KAAK,CAACf,WAAW,CAACuB,MAAM,CAAEH,CAAC,IAAKA,CAAC,CAACR,EAAE,KAAKA,EAAE;MAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED;EACAgB,qBAAqB,EAAGb,UAAU,IAAKT,GAAG,CAAC;IAAEE,kBAAkB,EAAEO;EAAW,CAAC;AAC/E,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}