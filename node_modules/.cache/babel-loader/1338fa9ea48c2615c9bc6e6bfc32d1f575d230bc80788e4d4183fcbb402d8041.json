{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { db } from \"../db/dexie.js\"; // ✅ ensure correct path\n\n// 🌐 Simulate latency + 5–10% random error on writes\nasync function simulateNetwork(isWrite = false) {\n  const delay = 200 + Math.random() * 1000;\n  await new Promise(r => setTimeout(r, delay));\n  //if (isWrite && Math.random() < 0.1) throw new Error(\"Simulated network error\");\n}\n\n// ------------------ 🧾 JOBS ------------------\nexport function useJobs(opts) {\n  _s();\n  return useQuery({\n    queryKey: [\"jobs\", opts],\n    queryFn: async () => {\n      await simulateNetwork();\n      const {\n        search = \"\",\n        status = \"\",\n        page = 1,\n        pageSize = 10\n      } = opts;\n      let jobs = await db.jobs.toArray();\n\n      // 🔍 Filter logic\n      if (search) jobs = jobs.filter(j => j.title.toLowerCase().includes(search.toLowerCase()));\n      if (status) jobs = jobs.filter(j => j.status === status);\n\n      // 🔢 Pagination\n      const start = (page - 1) * pageSize;\n      const items = jobs.slice(start, start + pageSize);\n      return {\n        items,\n        total: jobs.length\n      };\n    }\n  });\n}\n\n// ------------------ 🔄 REORDER JOBS ------------------\n_s(useJobs, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport function useReorderJob() {\n  _s2();\n  const qc = useQueryClient();\n  return useMutation({\n    // 🧠 Optimistic update before server (Dexie) call\n    onMutate: async ({\n      id,\n      fromOrder,\n      toOrder\n    }) => {\n      await qc.cancelQueries([\"jobs\"]);\n      const previousJobs = qc.getQueryData([\"jobs\"]);\n\n      // Optimistically reorder jobs in cache\n      qc.setQueryData([\"jobs\"], old => {\n        if (!(old !== null && old !== void 0 && old.items)) return old;\n        const updated = [...old.items];\n        const [moved] = updated.splice(fromOrder - 1, 1);\n        updated.splice(toOrder - 1, 0, moved);\n        return {\n          ...old,\n          items: updated\n        };\n      });\n      return {\n        previousJobs\n      };\n    },\n    // 🧾 Real DB update\n    mutationFn: async ({\n      id,\n      fromOrder,\n      toOrder\n    }) => {\n      await simulateNetwork(true);\n      const job = await db.jobs.get(id);\n      if (!job) throw new Error(\"Job not found\");\n      await db.jobs.update(id, {\n        order: toOrder\n      });\n      return job;\n    },\n    // ✅ Refetch to sync Dexie data\n    onSuccess: () => qc.invalidateQueries([\"jobs\"]),\n    // ❌ Rollback if error occurs\n    onError: (err, _, context) => {\n      if (context !== null && context !== void 0 && context.previousJobs) {\n        qc.setQueryData([\"jobs\"], context.previousJobs);\n      }\n    }\n  });\n}\n\n// ------------------ 👥 CANDIDATES ------------------\n_s2(useReorderJob, \"ec0A66mtyLA0kdwNsMUsaWj/EHM=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport function useCandidates(opts) {\n  _s3();\n  return useQuery({\n    queryKey: [\"candidates\", opts],\n    queryFn: async () => {\n      await simulateNetwork();\n      const {\n        search = \"\",\n        stage = \"\",\n        page = 1,\n        pageSize = 12\n      } = opts;\n      let candidates = await db.candidates.toArray();\n\n      // 🔍 Filter logic\n      if (search) candidates = candidates.filter(c => c.name.toLowerCase().includes(search.toLowerCase()));\n      if (stage) candidates = candidates.filter(c => c.stage === stage);\n\n      // 🔢 Pagination\n      const start = (page - 1) * pageSize;\n      const items = candidates.slice(start, start + pageSize);\n      return {\n        items,\n        total: candidates.length\n      };\n    }\n  });\n}\n\n// ------------------ ✏️ UPDATE CANDIDATE ------------------\n_s3(useCandidates, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport function useUpdateCandidate() {\n  _s4();\n  const qc = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      id,\n      data\n    }) => {\n      await simulateNetwork(true);\n      const candidate = await db.candidates.get(id);\n      if (!candidate) throw new Error(\"Candidate not found\");\n      await db.candidates.update(id, data);\n      return {\n        ...candidate,\n        ...data\n      };\n    },\n    onSuccess: () => qc.invalidateQueries([\"candidates\"])\n  });\n}\n_s4(useUpdateCandidate, \"ec0A66mtyLA0kdwNsMUsaWj/EHM=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","db","simulateNetwork","isWrite","delay","Math","random","Promise","r","setTimeout","useJobs","opts","_s","queryKey","queryFn","search","status","page","pageSize","jobs","toArray","filter","j","title","toLowerCase","includes","start","items","slice","total","length","useReorderJob","_s2","qc","onMutate","id","fromOrder","toOrder","cancelQueries","previousJobs","getQueryData","setQueryData","old","updated","moved","splice","mutationFn","job","get","Error","update","order","onSuccess","invalidateQueries","onError","err","_","context","useCandidates","_s3","stage","candidates","c","name","useUpdateCandidate","_s4","data","candidate"],"sources":["C:/Users/viren/Trial 2/src/hooks/useApi.js"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { db } from \"../db/dexie.js\"; // ✅ ensure correct path\r\n\r\n// 🌐 Simulate latency + 5–10% random error on writes\r\nasync function simulateNetwork(isWrite = false) {\r\n  const delay = 200 + Math.random() * 1000;\r\n  await new Promise((r) => setTimeout(r, delay));\r\n  //if (isWrite && Math.random() < 0.1) throw new Error(\"Simulated network error\");\r\n}\r\n\r\n// ------------------ 🧾 JOBS ------------------\r\nexport function useJobs(opts) {\r\n  return useQuery({\r\n    queryKey: [\"jobs\", opts],\r\n    queryFn: async () => {\r\n      await simulateNetwork();\r\n      const { search = \"\", status = \"\", page = 1, pageSize = 10 } = opts;\r\n\r\n      let jobs = await db.jobs.toArray();\r\n\r\n      // 🔍 Filter logic\r\n      if (search)\r\n        jobs = jobs.filter((j) =>\r\n          j.title.toLowerCase().includes(search.toLowerCase())\r\n        );\r\n      if (status) jobs = jobs.filter((j) => j.status === status);\r\n\r\n      // 🔢 Pagination\r\n      const start = (page - 1) * pageSize;\r\n      const items = jobs.slice(start, start + pageSize);\r\n      return { items, total: jobs.length };\r\n    },\r\n  });\r\n}\r\n\r\n// ------------------ 🔄 REORDER JOBS ------------------\r\nexport function useReorderJob() {\r\n  const qc = useQueryClient();\r\n\r\n  return useMutation({\r\n    // 🧠 Optimistic update before server (Dexie) call\r\n    onMutate: async ({ id, fromOrder, toOrder }) => {\r\n      await qc.cancelQueries([\"jobs\"]);\r\n      const previousJobs = qc.getQueryData([\"jobs\"]);\r\n\r\n      // Optimistically reorder jobs in cache\r\n      qc.setQueryData([\"jobs\"], (old) => {\r\n        if (!old?.items) return old;\r\n        const updated = [...old.items];\r\n        const [moved] = updated.splice(fromOrder - 1, 1);\r\n        updated.splice(toOrder - 1, 0, moved);\r\n        return { ...old, items: updated };\r\n      });\r\n\r\n      return { previousJobs };\r\n    },\r\n\r\n    // 🧾 Real DB update\r\n    mutationFn: async ({ id, fromOrder, toOrder }) => {\r\n      await simulateNetwork(true);\r\n      const job = await db.jobs.get(id);\r\n      if (!job) throw new Error(\"Job not found\");\r\n      await db.jobs.update(id, { order: toOrder });\r\n      return job;\r\n    },\r\n\r\n    // ✅ Refetch to sync Dexie data\r\n    onSuccess: () => qc.invalidateQueries([\"jobs\"]),\r\n\r\n    // ❌ Rollback if error occurs\r\n    onError: (err, _, context) => {\r\n      if (context?.previousJobs) {\r\n        qc.setQueryData([\"jobs\"], context.previousJobs);\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\n// ------------------ 👥 CANDIDATES ------------------\r\nexport function useCandidates(opts) {\r\n  return useQuery({\r\n    queryKey: [\"candidates\", opts],\r\n    queryFn: async () => {\r\n      await simulateNetwork();\r\n      const { search = \"\", stage = \"\", page = 1, pageSize = 12 } = opts;\r\n\r\n      let candidates = await db.candidates.toArray();\r\n\r\n      // 🔍 Filter logic\r\n      if (search)\r\n        candidates = candidates.filter((c) =>\r\n          c.name.toLowerCase().includes(search.toLowerCase())\r\n        );\r\n      if (stage) candidates = candidates.filter((c) => c.stage === stage);\r\n\r\n      // 🔢 Pagination\r\n      const start = (page - 1) * pageSize;\r\n      const items = candidates.slice(start, start + pageSize);\r\n      return { items, total: candidates.length };\r\n    },\r\n  });\r\n}\r\n\r\n// ------------------ ✏️ UPDATE CANDIDATE ------------------\r\nexport function useUpdateCandidate() {\r\n  const qc = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: async ({ id, data }) => {\r\n      await simulateNetwork(true);\r\n      const candidate = await db.candidates.get(id);\r\n      if (!candidate) throw new Error(\"Candidate not found\");\r\n      await db.candidates.update(id, data);\r\n      return { ...candidate, ...data };\r\n    },\r\n    onSuccess: () => qc.invalidateQueries([\"candidates\"]),\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}