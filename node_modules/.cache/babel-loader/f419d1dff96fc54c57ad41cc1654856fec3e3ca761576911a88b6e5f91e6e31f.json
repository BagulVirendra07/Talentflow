{"ast":null,"code":"import { create } from \"zustand\";\nexport const useAssessmentStore = create(set => ({\n  assessments: [],\n  // Load 3 default assessments with relevant topics\n  fetchAssessments: () => {\n    const topics = [\"Frontend\", \"Backend\", \"Database\"];\n    const defaultAssessments = topics.map((topic, i) => ({\n      id: i + 1,\n      title: `Assessment ${i + 1} (${topic})`,\n      sections: [{\n        name: `Section 1`,\n        questions: Array.from({\n          length: 12\n        }, (_, j) => ({\n          text: `${topic} Question ${j + 1}`,\n          type: j % 6 === 0 ? \"short\" : j % 6 === 1 ? \"long\" : j % 6 === 2 ? \"numeric\" : j % 6 === 3 ? \"single\" : j % 6 === 4 ? \"multi\" : \"file\",\n          options: j % 6 === 3 || j % 6 === 4 ? [\"Option A\", \"Option B\", \"Option C\"] : []\n        }))\n      }]\n    }));\n    set({\n      assessments: defaultAssessments\n    });\n  },\n  // Add new assessment dynamically\n  addAssessment: title => set(state => ({\n    assessments: [...state.assessments, {\n      id: state.assessments.length + 1,\n      title,\n      sections: [{\n        name: `Section 1`,\n        questions: []\n      }]\n    }]\n  })),\n  // Add question dynamically\n  addQuestion: (assessmentId, sectionName, question) => set(state => ({\n    assessments: state.assessments.map(a => a.id === assessmentId ? {\n      ...a,\n      sections: a.sections.map(s => s.name === sectionName ? {\n        ...s,\n        questions: [...s.questions, question]\n      } : s)\n    } : a)\n  }))\n}));","map":{"version":3,"names":["create","useAssessmentStore","set","assessments","fetchAssessments","topics","defaultAssessments","map","topic","i","id","title","sections","name","questions","Array","from","length","_","j","text","type","options","addAssessment","state","addQuestion","assessmentId","sectionName","question","a","s"],"sources":["C:/Users/viren/Trial 2/src/components/Assessments/useAssessmentStore.js"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nexport const useAssessmentStore = create((set) => ({\r\n  assessments: [],\r\n\r\n  // Load 3 default assessments with relevant topics\r\n  fetchAssessments: () => {\r\n    const topics = [\"Frontend\", \"Backend\", \"Database\"];\r\n    const defaultAssessments = topics.map((topic, i) => ({\r\n      id: i + 1,\r\n      title: `Assessment ${i + 1} (${topic})`,\r\n      sections: [\r\n        {\r\n          name: `Section 1`,\r\n          questions: Array.from({ length: 12 }, (_, j) => ({\r\n            text: `${topic} Question ${j + 1}`,\r\n            type:\r\n              j % 6 === 0\r\n                ? \"short\"\r\n                : j % 6 === 1\r\n                ? \"long\"\r\n                : j % 6 === 2\r\n                ? \"numeric\"\r\n                : j % 6 === 3\r\n                ? \"single\"\r\n                : j % 6 === 4\r\n                ? \"multi\"\r\n                : \"file\",\r\n            options:\r\n              j % 6 === 3 || j % 6 === 4\r\n                ? [\"Option A\", \"Option B\", \"Option C\"]\r\n                : [],\r\n          })),\r\n        },\r\n      ],\r\n    }));\r\n    set({ assessments: defaultAssessments });\r\n  },\r\n\r\n  // Add new assessment dynamically\r\n  addAssessment: (title) =>\r\n    set((state) => ({\r\n      assessments: [\r\n        ...state.assessments,\r\n        {\r\n          id: state.assessments.length + 1,\r\n          title,\r\n          sections: [\r\n            {\r\n              name: `Section 1`,\r\n              questions: [],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    })),\r\n\r\n  // Add question dynamically\r\n  addQuestion: (assessmentId, sectionName, question) =>\r\n    set((state) => ({\r\n      assessments: state.assessments.map((a) =>\r\n        a.id === assessmentId\r\n          ? {\r\n              ...a,\r\n              sections: a.sections.map((s) =>\r\n                s.name === sectionName\r\n                  ? { ...s, questions: [...s.questions, question] }\r\n                  : s\r\n              ),\r\n            }\r\n          : a\r\n      ),\r\n    })),\r\n}));\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAEhC,OAAO,MAAMC,kBAAkB,GAAGD,MAAM,CAAEE,GAAG,KAAM;EACjDC,WAAW,EAAE,EAAE;EAEf;EACAC,gBAAgB,EAAEA,CAAA,KAAM;IACtB,MAAMC,MAAM,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,UAAU,CAAC;IAClD,MAAMC,kBAAkB,GAAGD,MAAM,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,MAAM;MACnDC,EAAE,EAAED,CAAC,GAAG,CAAC;MACTE,KAAK,EAAE,cAAcF,CAAC,GAAG,CAAC,KAAKD,KAAK,GAAG;MACvCI,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,WAAW;QACjBC,SAAS,EAAEC,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,MAAM;UAC/CC,IAAI,EAAE,GAAGZ,KAAK,aAAaW,CAAC,GAAG,CAAC,EAAE;UAClCE,IAAI,EACFF,CAAC,GAAG,CAAC,KAAK,CAAC,GACP,OAAO,GACPA,CAAC,GAAG,CAAC,KAAK,CAAC,GACX,MAAM,GACNA,CAAC,GAAG,CAAC,KAAK,CAAC,GACX,SAAS,GACTA,CAAC,GAAG,CAAC,KAAK,CAAC,GACX,QAAQ,GACRA,CAAC,GAAG,CAAC,KAAK,CAAC,GACX,OAAO,GACP,MAAM;UACZG,OAAO,EACLH,CAAC,GAAG,CAAC,KAAK,CAAC,IAAIA,CAAC,GAAG,CAAC,KAAK,CAAC,GACtB,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,GACpC;QACR,CAAC,CAAC;MACJ,CAAC;IAEL,CAAC,CAAC,CAAC;IACHjB,GAAG,CAAC;MAAEC,WAAW,EAAEG;IAAmB,CAAC,CAAC;EAC1C,CAAC;EAED;EACAiB,aAAa,EAAGZ,KAAK,IACnBT,GAAG,CAAEsB,KAAK,KAAM;IACdrB,WAAW,EAAE,CACX,GAAGqB,KAAK,CAACrB,WAAW,EACpB;MACEO,EAAE,EAAEc,KAAK,CAACrB,WAAW,CAACc,MAAM,GAAG,CAAC;MAChCN,KAAK;MACLC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,WAAW;QACjBC,SAAS,EAAE;MACb,CAAC;IAEL,CAAC;EAEL,CAAC,CAAC,CAAC;EAEL;EACAW,WAAW,EAAEA,CAACC,YAAY,EAAEC,WAAW,EAAEC,QAAQ,KAC/C1B,GAAG,CAAEsB,KAAK,KAAM;IACdrB,WAAW,EAAEqB,KAAK,CAACrB,WAAW,CAACI,GAAG,CAAEsB,CAAC,IACnCA,CAAC,CAACnB,EAAE,KAAKgB,YAAY,GACjB;MACE,GAAGG,CAAC;MACJjB,QAAQ,EAAEiB,CAAC,CAACjB,QAAQ,CAACL,GAAG,CAAEuB,CAAC,IACzBA,CAAC,CAACjB,IAAI,KAAKc,WAAW,GAClB;QAAE,GAAGG,CAAC;QAAEhB,SAAS,EAAE,CAAC,GAAGgB,CAAC,CAAChB,SAAS,EAAEc,QAAQ;MAAE,CAAC,GAC/CE,CACN;IACF,CAAC,GACDD,CACN;EACF,CAAC,CAAC;AACN,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}