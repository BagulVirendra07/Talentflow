{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\viren\\\\Trial 2\\\\src\\\\components\\\\Candidates\\\\KanbanBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DndContext, useSensor, useSensors, PointerSensor } from \"@dnd-kit/core\";\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\nimport CandidateCard from \"./CandidateCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KanbanBoard() {\n  _s();\n  const stages = [\"tech\", \"offer\", \"hired\", \"rejected\"];\n\n  // Example candidate data (you’ll later replace with your 1000)\n  const [candidates, setCandidates] = useState([{\n    id: \"1\",\n    name: \"Amit\",\n    email: \"amit@example.com\",\n    stage: \"tech\"\n  }, {\n    id: \"2\",\n    name: \"Priya\",\n    email: \"priya@example.com\",\n    stage: \"offer\"\n  }, {\n    id: \"3\",\n    name: \"Rohan\",\n    email: \"rohan@example.com\",\n    stage: \"hired\"\n  }, {\n    id: \"4\",\n    name: \"Sneha\",\n    email: \"sneha@example.com\",\n    stage: \"rejected\"\n  }]);\n  const sensors = useSensors(useSensor(PointerSensor));\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over) return;\n    const activeId = active.id;\n    const overStage = over.id;\n    setCandidates(prev => prev.map(c => c.id === activeId ? {\n      ...c,\n      stage: overStage\n    } : c));\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    sensors: sensors,\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"16px\"\n      },\n      children: stages.map(stage => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: stage,\n        style: {\n          flex: 1,\n          background: \"#f4f4f4\",\n          borderRadius: \"8px\",\n          padding: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: stage.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n          items: candidates.filter(c => c.stage === stage).map(c => c.id),\n          strategy: verticalListSortingStrategy,\n          children: candidates.filter(c => c.stage === stage).map(candidate => /*#__PURE__*/_jsxDEV(CandidateCard, {\n            candidate: candidate\n          }, candidate.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, stage, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(KanbanBoard, \"zgpV4o7CWDnPZR5PW1NG/lAgq2Q=\", false, function () {\n  return [useSensors, useSensor];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","DndContext","useSensor","useSensors","PointerSensor","arrayMove","SortableContext","verticalListSortingStrategy","CandidateCard","jsxDEV","_jsxDEV","KanbanBoard","_s","stages","candidates","setCandidates","id","name","email","stage","sensors","handleDragEnd","event","active","over","activeId","overStage","prev","map","c","onDragEnd","children","style","display","gap","flex","background","borderRadius","padding","textAlign","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","items","filter","strategy","candidate","_c","$RefreshReg$"],"sources":["C:/Users/viren/Trial 2/src/components/Candidates/KanbanBoard.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { DndContext, useSensor, useSensors, PointerSensor } from \"@dnd-kit/core\";\r\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\r\nimport CandidateCard from \"./CandidateCard\";\r\n\r\nfunction KanbanBoard() {\r\n  const stages = [\"tech\", \"offer\", \"hired\", \"rejected\"];\r\n\r\n  // Example candidate data (you’ll later replace with your 1000)\r\n  const [candidates, setCandidates] = useState([\r\n    { id: \"1\", name: \"Amit\", email: \"amit@example.com\", stage: \"tech\" },\r\n    { id: \"2\", name: \"Priya\", email: \"priya@example.com\", stage: \"offer\" },\r\n    { id: \"3\", name: \"Rohan\", email: \"rohan@example.com\", stage: \"hired\" },\r\n    { id: \"4\", name: \"Sneha\", email: \"sneha@example.com\", stage: \"rejected\" },\r\n  ]);\r\n\r\n  const sensors = useSensors(useSensor(PointerSensor));\r\n\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n    if (!over) return;\r\n\r\n    const activeId = active.id;\r\n    const overStage = over.id;\r\n\r\n    setCandidates((prev) =>\r\n      prev.map((c) =>\r\n        c.id === activeId ? { ...c, stage: overStage } : c\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <DndContext sensors={sensors} onDragEnd={handleDragEnd}>\r\n      <div style={{ display: \"flex\", gap: \"16px\" }}>\r\n        {stages.map((stage) => (\r\n          <div\r\n            key={stage}\r\n            id={stage}\r\n            style={{\r\n              flex: 1,\r\n              background: \"#f4f4f4\",\r\n              borderRadius: \"8px\",\r\n              padding: \"10px\",\r\n            }}\r\n          >\r\n            <h3 style={{ textAlign: \"center\" }}>{stage.toUpperCase()}</h3>\r\n            <SortableContext\r\n              items={candidates.filter((c) => c.stage === stage).map((c) => c.id)}\r\n              strategy={verticalListSortingStrategy}\r\n            >\r\n              {candidates\r\n                .filter((c) => c.stage === stage)\r\n                .map((candidate) => (\r\n                  <CandidateCard key={candidate.id} candidate={candidate} />\r\n                ))}\r\n            </SortableContext>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </DndContext>\r\n  );\r\n}\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}