{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { db } from \"../db/dexie.js\"; // adjust path if needed\n\n// Simulate latency + 5–10% error on writes\nasync function simulateNetwork(isWrite = false) {\n  const delay = 200 + Math.random() * 1000;\n  await new Promise(r => setTimeout(r, delay));\n  if (isWrite && Math.random() < 0.1) throw new Error(\"Simulated network error\");\n}\n\n// ------------------ Jobs ------------------\nexport function useJobs(opts) {\n  _s();\n  return useQuery({\n    queryKey: [\"jobs\", opts],\n    queryFn: async () => {\n      await simulateNetwork();\n      const {\n        search = \"\",\n        status = \"\",\n        page = 1,\n        pageSize = 10\n      } = opts;\n      let jobs = await db.jobs.toArray();\n      if (search) jobs = jobs.filter(j => j.title.toLowerCase().includes(search.toLowerCase()));\n      if (status) jobs = jobs.filter(j => j.status === status);\n      const start = (page - 1) * pageSize;\n      const items = jobs.slice(start, start + pageSize);\n      return {\n        items,\n        total: jobs.length\n      };\n    }\n  });\n}\n_s(useJobs, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport function useReorderJob() {\n  _s2();\n  const qc = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      id,\n      fromOrder,\n      toOrder\n    }) => {\n      await simulateNetwork(true);\n      const job = await db.jobs.get(id);\n      if (!job) throw new Error(\"Job not found\");\n      await db.jobs.update(id, {\n        order: toOrder\n      });\n      return job;\n    },\n    onSuccess: () => qc.invalidateQueries([\"jobs\"])\n  });\n}\n\n// ------------------ Candidates ------------------\n_s2(useReorderJob, \"ec0A66mtyLA0kdwNsMUsaWj/EHM=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport function useCandidates(opts) {\n  _s3();\n  return useQuery({\n    queryKey: [\"candidates\", opts],\n    queryFn: async () => {\n      await simulateNetwork();\n      const {\n        search = \"\",\n        stage = \"\",\n        page = 1,\n        pageSize = 12\n      } = opts;\n      let candidates = await db.candidates.toArray();\n      if (search) candidates = candidates.filter(c => c.name.toLowerCase().includes(search.toLowerCase()));\n      if (stage) candidates = candidates.filter(c => c.stage === stage);\n      const start = (page - 1) * pageSize;\n      const items = candidates.slice(start, start + pageSize);\n      return {\n        items,\n        total: candidates.length\n      };\n    }\n  });\n}\n_s3(useCandidates, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport function useUpdateCandidate() {\n  _s4();\n  const qc = useQueryClient();\n  return useMutation({\n    mutationFn: async ({\n      id,\n      data\n    }) => {\n      await simulateNetwork(true);\n      const candidate = await db.candidates.get(id);\n      if (!candidate) throw new Error(\"Candidate not found\");\n      await db.candidates.update(id, data);\n      return {\n        ...candidate,\n        ...data\n      };\n    },\n    onSuccess: () => qc.invalidateQueries([\"candidates\"])\n  });\n}\n_s4(useUpdateCandidate, \"ec0A66mtyLA0kdwNsMUsaWj/EHM=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","db","simulateNetwork","isWrite","delay","Math","random","Promise","r","setTimeout","Error","useJobs","opts","_s","queryKey","queryFn","search","status","page","pageSize","jobs","toArray","filter","j","title","toLowerCase","includes","start","items","slice","total","length","useReorderJob","_s2","qc","mutationFn","id","fromOrder","toOrder","job","get","update","order","onSuccess","invalidateQueries","useCandidates","_s3","stage","candidates","c","name","useUpdateCandidate","_s4","data","candidate"],"sources":["C:/Users/viren/Trial 2/src/hooks/useApi.js"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nimport { db } from \"../db/dexie.js\"; // adjust path if needed\r\n\r\n// Simulate latency + 5–10% error on writes\r\nasync function simulateNetwork(isWrite = false) {\r\n  const delay = 200 + Math.random() * 1000;\r\n  await new Promise((r) => setTimeout(r, delay));\r\n  if (isWrite && Math.random() < 0.1) throw new Error(\"Simulated network error\");\r\n}\r\n\r\n// ------------------ Jobs ------------------\r\nexport function useJobs(opts) {\r\n  return useQuery({\r\n    queryKey: [\"jobs\", opts],\r\n    queryFn: async () => {\r\n      await simulateNetwork();\r\n      const { search = \"\", status = \"\", page = 1, pageSize = 10 } = opts;\r\n\r\n      let jobs = await db.jobs.toArray();\r\n      if (search) jobs = jobs.filter((j) => j.title.toLowerCase().includes(search.toLowerCase()));\r\n      if (status) jobs = jobs.filter((j) => j.status === status);\r\n\r\n      const start = (page - 1) * pageSize;\r\n      const items = jobs.slice(start, start + pageSize);\r\n      return { items, total: jobs.length };\r\n    },\r\n  });\r\n}\r\n\r\nexport function useReorderJob() {\r\n  const qc = useQueryClient();\r\n  return useMutation({\r\n    mutationFn: async ({ id, fromOrder, toOrder }) => {\r\n      await simulateNetwork(true);\r\n      const job = await db.jobs.get(id);\r\n      if (!job) throw new Error(\"Job not found\");\r\n      await db.jobs.update(id, { order: toOrder });\r\n      return job;\r\n    },\r\n    onSuccess: () => qc.invalidateQueries([\"jobs\"]),\r\n  });\r\n}\r\n\r\n// ------------------ Candidates ------------------\r\nexport function useCandidates(opts) {\r\n  return useQuery({\r\n    queryKey: [\"candidates\", opts],\r\n    queryFn: async () => {\r\n      await simulateNetwork();\r\n      const { search = \"\", stage = \"\", page = 1, pageSize = 12 } = opts;\r\n\r\n      let candidates = await db.candidates.toArray();\r\n      if (search) candidates = candidates.filter((c) => c.name.toLowerCase().includes(search.toLowerCase()));\r\n      if (stage) candidates = candidates.filter((c) => c.stage === stage);\r\n\r\n      const start = (page - 1) * pageSize;\r\n      const items = candidates.slice(start, start + pageSize);\r\n      return { items, total: candidates.length };\r\n    },\r\n  });\r\n}\r\n\r\nexport function useUpdateCandidate() {\r\n  const qc = useQueryClient();\r\n  return useMutation({\r\n    mutationFn: async ({ id, data }) => {\r\n      await simulateNetwork(true);\r\n      const candidate = await db.candidates.get(id);\r\n      if (!candidate) throw new Error(\"Candidate not found\");\r\n      await db.candidates.update(id, data);\r\n      return { ...candidate, ...data };\r\n    },\r\n    onSuccess: () => qc.invalidateQueries([\"candidates\"]),\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}