{"ast":null,"code":"// ðŸ“‚ src/store/useAssessmentStore.js\nimport { create } from \"zustand\";\nexport const useAssessmentStore = create(set => ({\n  assessments: [],\n  // âœ… Load default 3 assessments\n  fetchAssessments: () => {\n    const defaultAssessments = [{\n      id: 1,\n      title: \"Frontend Assessment\",\n      sections: [{\n        name: \"Section 1\",\n        questions: [{\n          text: \"What is React?\",\n          type: \"short\"\n        }, {\n          text: \"Explain virtual DOM.\",\n          type: \"long\"\n        }, {\n          text: \"What is JSX?\",\n          type: \"short\"\n        }, {\n          text: \"What is useState used for?\",\n          type: \"short\"\n        }, {\n          text: \"Define component lifecycle.\",\n          type: \"long\"\n        }, {\n          text: \"Select frontend frameworks you know:\",\n          type: \"multi\",\n          options: [\"React\", \"Vue\", \"Angular\"]\n        }, {\n          text: \"Rate your HTML knowledge (1â€“10):\",\n          type: \"numeric\"\n        }, {\n          text: \"Upload sample UI design (optional):\",\n          type: \"file\"\n        }]\n      }]\n    }, {\n      id: 2,\n      title: \"Backend Assessment\",\n      sections: [{\n        name: \"Section 1\",\n        questions: [{\n          text: \"What is REST API?\",\n          type: \"short\"\n        }, {\n          text: \"Explain middleware in Express.js\",\n          type: \"long\"\n        }, {\n          text: \"What is the purpose of JWT?\",\n          type: \"short\"\n        }, {\n          text: \"Select backend languages you use:\",\n          type: \"multi\",\n          options: [\"Node.js\", \"Python\", \"Java\"]\n        }, {\n          text: \"What is status code 500?\",\n          type: \"short\"\n        }, {\n          text: \"Define microservices.\",\n          type: \"long\"\n        }, {\n          text: \"How many APIs have you built?\",\n          type: \"numeric\"\n        }]\n      }]\n    }, {\n      id: 3,\n      title: \"Database Assessment\",\n      sections: [{\n        name: \"Section 1\",\n        questions: [{\n          text: \"What is a primary key?\",\n          type: \"short\"\n        }, {\n          text: \"Explain normalization.\",\n          type: \"long\"\n        }, {\n          text: \"Write SQL to fetch top 10 records.\",\n          type: \"short\"\n        }, {\n          text: \"Select databases you worked with:\",\n          type: \"multi\",\n          options: [\"MySQL\", \"MongoDB\", \"PostgreSQL\"]\n        }, {\n          text: \"What is an index?\",\n          type: \"short\"\n        }, {\n          text: \"What is ACID property?\",\n          type: \"long\"\n        }, {\n          text: \"Estimate your DB query speed (1â€“10):\",\n          type: \"numeric\"\n        }]\n      }]\n    }];\n    set({\n      assessments: defaultAssessments\n    });\n  },\n  // âœ… Add a new assessment\n  addAssessment: title => set(state => ({\n    assessments: [...state.assessments, {\n      id: state.assessments.length + 1,\n      title,\n      sections: [{\n        name: \"Section 1\",\n        questions: []\n      }]\n    }]\n  })),\n  // âœ… Add question to selected assessment\n  addQuestion: (assessmentId, sectionName, question) => set(state => ({\n    assessments: state.assessments.map(a => a.id === assessmentId ? {\n      ...a,\n      sections: a.sections.map(s => s.name === sectionName ? {\n        ...s,\n        questions: [...s.questions, question]\n      } : s)\n    } : a)\n  }))\n}));","map":{"version":3,"names":["create","useAssessmentStore","set","assessments","fetchAssessments","defaultAssessments","id","title","sections","name","questions","text","type","options","addAssessment","state","length","addQuestion","assessmentId","sectionName","question","map","a","s"],"sources":["C:/Users/viren/Trial 2/src/components/Assessments/useAssessmentStore.js"],"sourcesContent":["// ðŸ“‚ src/store/useAssessmentStore.js\r\nimport { create } from \"zustand\";\r\n\r\nexport const useAssessmentStore = create((set) => ({\r\n  assessments: [],\r\n\r\n  // âœ… Load default 3 assessments\r\n  fetchAssessments: () => {\r\n    const defaultAssessments = [\r\n      {\r\n        id: 1,\r\n        title: \"Frontend Assessment\",\r\n        sections: [\r\n          {\r\n            name: \"Section 1\",\r\n            questions: [\r\n              { text: \"What is React?\", type: \"short\" },\r\n              { text: \"Explain virtual DOM.\", type: \"long\" },\r\n              { text: \"What is JSX?\", type: \"short\" },\r\n              { text: \"What is useState used for?\", type: \"short\" },\r\n              { text: \"Define component lifecycle.\", type: \"long\" },\r\n              { text: \"Select frontend frameworks you know:\", type: \"multi\", options: [\"React\", \"Vue\", \"Angular\"] },\r\n              { text: \"Rate your HTML knowledge (1â€“10):\", type: \"numeric\" },\r\n              { text: \"Upload sample UI design (optional):\", type: \"file\" },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Backend Assessment\",\r\n        sections: [\r\n          {\r\n            name: \"Section 1\",\r\n            questions: [\r\n              { text: \"What is REST API?\", type: \"short\" },\r\n              { text: \"Explain middleware in Express.js\", type: \"long\" },\r\n              { text: \"What is the purpose of JWT?\", type: \"short\" },\r\n              { text: \"Select backend languages you use:\", type: \"multi\", options: [\"Node.js\", \"Python\", \"Java\"] },\r\n              { text: \"What is status code 500?\", type: \"short\" },\r\n              { text: \"Define microservices.\", type: \"long\" },\r\n              { text: \"How many APIs have you built?\", type: \"numeric\" },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Database Assessment\",\r\n        sections: [\r\n          {\r\n            name: \"Section 1\",\r\n            questions: [\r\n              { text: \"What is a primary key?\", type: \"short\" },\r\n              { text: \"Explain normalization.\", type: \"long\" },\r\n              { text: \"Write SQL to fetch top 10 records.\", type: \"short\" },\r\n              { text: \"Select databases you worked with:\", type: \"multi\", options: [\"MySQL\", \"MongoDB\", \"PostgreSQL\"] },\r\n              { text: \"What is an index?\", type: \"short\" },\r\n              { text: \"What is ACID property?\", type: \"long\" },\r\n              { text: \"Estimate your DB query speed (1â€“10):\", type: \"numeric\" },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n\r\n    set({ assessments: defaultAssessments });\r\n  },\r\n\r\n  // âœ… Add a new assessment\r\n  addAssessment: (title) =>\r\n    set((state) => ({\r\n      assessments: [\r\n        ...state.assessments,\r\n        {\r\n          id: state.assessments.length + 1,\r\n          title,\r\n          sections: [{ name: \"Section 1\", questions: [] }],\r\n        },\r\n      ],\r\n    })),\r\n\r\n  // âœ… Add question to selected assessment\r\n  addQuestion: (assessmentId, sectionName, question) =>\r\n    set((state) => ({\r\n      assessments: state.assessments.map((a) =>\r\n        a.id === assessmentId\r\n          ? {\r\n              ...a,\r\n              sections: a.sections.map((s) =>\r\n                s.name === sectionName\r\n                  ? { ...s, questions: [...s.questions, question] }\r\n                  : s\r\n              ),\r\n            }\r\n          : a\r\n      ),\r\n    })),\r\n}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}