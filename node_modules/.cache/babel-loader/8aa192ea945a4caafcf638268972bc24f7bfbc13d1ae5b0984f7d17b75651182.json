{"ast":null,"code":"import { create } from \"zustand\";\nexport const useAssessmentStore = create((set, get) => ({\n  assessments: [{\n    id: 1,\n    title: \"Assessment 1 - Frontend\",\n    sections: [{\n      name: \"Frontend Basics\",\n      questions: [{\n        text: \"What is React?\",\n        type: \"short\"\n      }, {\n        text: \"Explain JSX.\",\n        type: \"long\"\n      }, {\n        text: \"What are props in React?\",\n        type: \"short\"\n      }, {\n        text: \"What is useState hook used for?\",\n        type: \"short\"\n      }, {\n        text: \"Differentiate between state and props.\",\n        type: \"long\"\n      }, {\n        text: \"Which command is used to start a React app?\",\n        type: \"short\"\n      }, {\n        text: \"What is virtual DOM?\",\n        type: \"long\"\n      }, {\n        text: \"Explain one-way data binding.\",\n        type: \"short\"\n      }, {\n        text: \"Which of these are frontend frameworks?\",\n        type: \"multi\",\n        options: [\"React\", \"Django\", \"Angular\", \"Flask\"]\n      }, {\n        text: \"React is a ___ library.\",\n        type: \"single\",\n        options: [\"Backend\", \"Frontend\", \"Database\", \"Compiler\"]\n      }]\n    }]\n  }, {\n    id: 2,\n    title: \"Assessment 2 - Backend\",\n    sections: [{\n      name: \"Backend Concepts\",\n      questions: [{\n        text: \"What is Node.js?\",\n        type: \"short\"\n      }, {\n        text: \"Explain REST API.\",\n        type: \"long\"\n      }, {\n        text: \"What is Express.js used for?\",\n        type: \"short\"\n      }, {\n        text: \"What are middlewares?\",\n        type: \"short\"\n      }, {\n        text: \"Difference between PUT and POST.\",\n        type: \"long\"\n      }, {\n        text: \"What is npm?\",\n        type: \"short\"\n      }, {\n        text: \"Explain routing in backend.\",\n        type: \"long\"\n      }, {\n        text: \"What is JSON?\",\n        type: \"short\"\n      }, {\n        text: \"Which are backend frameworks?\",\n        type: \"multi\",\n        options: [\"Express\", \"Flask\", \"React\", \"Laravel\"]\n      }, {\n        text: \"Which protocol is used for APIs?\",\n        type: \"single\",\n        options: [\"FTP\", \"HTTP\", \"SMTP\", \"POP3\"]\n      }]\n    }]\n  }, {\n    id: 3,\n    title: \"Assessment 3 - Database\",\n    sections: [{\n      name: \"Database Fundamentals\",\n      questions: [{\n        text: \"What is a primary key?\",\n        type: \"short\"\n      }, {\n        text: \"Explain normalization.\",\n        type: \"long\"\n      }, {\n        text: \"What is SQL?\",\n        type: \"short\"\n      }, {\n        text: \"Difference between DELETE and TRUNCATE.\",\n        type: \"long\"\n      }, {\n        text: \"What are joins in SQL?\",\n        type: \"short\"\n      }, {\n        text: \"Explain foreign key.\",\n        type: \"short\"\n      }, {\n        text: \"What is indexing?\",\n        type: \"long\"\n      }, {\n        text: \"Define schema.\",\n        type: \"short\"\n      }, {\n        text: \"Which of these are relational databases?\",\n        type: \"multi\",\n        options: [\"MySQL\", \"MongoDB\", \"PostgreSQL\", \"Oracle\"]\n      }, {\n        text: \"SQL stands for ___\",\n        type: \"single\",\n        options: [\"Structured Query Language\", \"Sequential Query Logic\", \"Standard Question Language\"]\n      }]\n    }]\n  }],\n  fetchAssessments: () => {\n    const {\n      assessments\n    } = get();\n    set({\n      assessments\n    });\n  },\n  addAssessment: title => {\n    const newAssessment = {\n      id: Date.now(),\n      title,\n      sections: [{\n        name: \"New Section\",\n        questions: []\n      }]\n    };\n    set(state => ({\n      assessments: [...state.assessments, newAssessment]\n    }));\n  },\n  addQuestion: (assessmentId, text, type) => {\n    set(state => ({\n      assessments: state.assessments.map(a => a.id === assessmentId ? {\n        ...a,\n        sections: a.sections.map((s, i) => i === 0 ? {\n          ...s,\n          questions: [...s.questions, {\n            text,\n            type,\n            options: []\n          }]\n        } : s)\n      } : a)\n    }));\n  }\n}));","map":{"version":3,"names":["create","useAssessmentStore","set","get","assessments","id","title","sections","name","questions","text","type","options","fetchAssessments","addAssessment","newAssessment","Date","now","state","addQuestion","assessmentId","map","a","s","i"],"sources":["C:/Users/viren/Trial 2/src/components/Assessments/useAssessmentStore.js"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nexport const useAssessmentStore = create((set, get) => ({\r\n  assessments: [\r\n    {\r\n      id: 1,\r\n      title: \"Assessment 1 - Frontend\",\r\n      sections: [\r\n        {\r\n          name: \"Frontend Basics\",\r\n          questions: [\r\n            { text: \"What is React?\", type: \"short\" },\r\n            { text: \"Explain JSX.\", type: \"long\" },\r\n            { text: \"What are props in React?\", type: \"short\" },\r\n            { text: \"What is useState hook used for?\", type: \"short\" },\r\n            { text: \"Differentiate between state and props.\", type: \"long\" },\r\n            { text: \"Which command is used to start a React app?\", type: \"short\" },\r\n            { text: \"What is virtual DOM?\", type: \"long\" },\r\n            { text: \"Explain one-way data binding.\", type: \"short\" },\r\n            {\r\n              text: \"Which of these are frontend frameworks?\",\r\n              type: \"multi\",\r\n              options: [\"React\", \"Django\", \"Angular\", \"Flask\"],\r\n            },\r\n            {\r\n              text: \"React is a ___ library.\",\r\n              type: \"single\",\r\n              options: [\"Backend\", \"Frontend\", \"Database\", \"Compiler\"],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Assessment 2 - Backend\",\r\n      sections: [\r\n        {\r\n          name: \"Backend Concepts\",\r\n          questions: [\r\n            { text: \"What is Node.js?\", type: \"short\" },\r\n            { text: \"Explain REST API.\", type: \"long\" },\r\n            { text: \"What is Express.js used for?\", type: \"short\" },\r\n            { text: \"What are middlewares?\", type: \"short\" },\r\n            { text: \"Difference between PUT and POST.\", type: \"long\" },\r\n            { text: \"What is npm?\", type: \"short\" },\r\n            { text: \"Explain routing in backend.\", type: \"long\" },\r\n            { text: \"What is JSON?\", type: \"short\" },\r\n            {\r\n              text: \"Which are backend frameworks?\",\r\n              type: \"multi\",\r\n              options: [\"Express\", \"Flask\", \"React\", \"Laravel\"],\r\n            },\r\n            {\r\n              text: \"Which protocol is used for APIs?\",\r\n              type: \"single\",\r\n              options: [\"FTP\", \"HTTP\", \"SMTP\", \"POP3\"],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Assessment 3 - Database\",\r\n      sections: [\r\n        {\r\n          name: \"Database Fundamentals\",\r\n          questions: [\r\n            { text: \"What is a primary key?\", type: \"short\" },\r\n            { text: \"Explain normalization.\", type: \"long\" },\r\n            { text: \"What is SQL?\", type: \"short\" },\r\n            { text: \"Difference between DELETE and TRUNCATE.\", type: \"long\" },\r\n            { text: \"What are joins in SQL?\", type: \"short\" },\r\n            { text: \"Explain foreign key.\", type: \"short\" },\r\n            { text: \"What is indexing?\", type: \"long\" },\r\n            { text: \"Define schema.\", type: \"short\" },\r\n            {\r\n              text: \"Which of these are relational databases?\",\r\n              type: \"multi\",\r\n              options: [\"MySQL\", \"MongoDB\", \"PostgreSQL\", \"Oracle\"],\r\n            },\r\n            {\r\n              text: \"SQL stands for ___\",\r\n              type: \"single\",\r\n              options: [\r\n                \"Structured Query Language\",\r\n                \"Sequential Query Logic\",\r\n                \"Standard Question Language\",\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n\r\n  fetchAssessments: () => {\r\n    const { assessments } = get();\r\n    set({ assessments });\r\n  },\r\n\r\n  addAssessment: (title) => {\r\n    const newAssessment = {\r\n      id: Date.now(),\r\n      title,\r\n      sections: [\r\n        {\r\n          name: \"New Section\",\r\n          questions: [],\r\n        },\r\n      ],\r\n    };\r\n    set((state) => ({\r\n      assessments: [...state.assessments, newAssessment],\r\n    }));\r\n  },\r\n\r\n  addQuestion: (assessmentId, text, type) => {\r\n    set((state) => ({\r\n      assessments: state.assessments.map((a) =>\r\n        a.id === assessmentId\r\n          ? {\r\n              ...a,\r\n              sections: a.sections.map((s, i) =>\r\n                i === 0\r\n                  ? {\r\n                      ...s,\r\n                      questions: [\r\n                        ...s.questions,\r\n                        { text, type, options: [] },\r\n                      ],\r\n                    }\r\n                  : s\r\n              ),\r\n            }\r\n          : a\r\n      ),\r\n    }));\r\n  },\r\n}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}