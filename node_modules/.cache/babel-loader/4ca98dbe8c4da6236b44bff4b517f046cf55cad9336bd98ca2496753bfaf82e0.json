{"ast":null,"code":"// src/store/useAssessmentStore.js\nimport { create } from \"zustand\";\nimport { db, seedIfNeeded } from \"../db\";\n\n// latency & failure helpers\nconst latency = (min = 200, max = 1200) => new Promise(r => setTimeout(r, Math.random() * (max - min) + min));\nconst maybeFail = (rate = 0.08) => Math.random() < rate; // ~8%\n\nexport const useAssessmentStore = create((set, get) => ({\n  assessments: [],\n  loading: false,\n  error: null,\n  init: async () => {\n    set({\n      loading: true,\n      error: null\n    });\n    try {\n      await seedIfNeeded();\n      const arr = await db.assessments.toArray();\n      set({\n        assessments: arr,\n        loading: false\n      });\n    } catch (err) {\n      set({\n        error: err.message || String(err),\n        loading: false\n      });\n    }\n  },\n  // create assessment (simulate latency + chance of failure)\n  createAssessment: async assessment => {\n    set({\n      loading: true,\n      error: null\n    });\n    await latency();\n    if (maybeFail()) {\n      set({\n        error: \"Network (simulated) error creating assessment\",\n        loading: false\n      });\n      throw new Error(\"Simulated create failure\");\n    }\n    const id = await db.assessments.add(assessment);\n    const rec = await db.assessments.get(id);\n    set(state => ({\n      assessments: [...state.assessments, rec],\n      loading: false\n    }));\n    return rec;\n  },\n  updateAssessment: async (id, patch) => {\n    set({\n      loading: true,\n      error: null\n    });\n    await latency();\n    if (maybeFail()) {\n      set({\n        error: \"Simulated update failure\",\n        loading: false\n      });\n      throw new Error(\"Simulated update failure\");\n    }\n    await db.assessments.update(id, patch);\n    const updated = await db.assessments.get(id);\n    set(state => ({\n      assessments: state.assessments.map(a => a.id === id ? updated : a),\n      loading: false\n    }));\n    return updated;\n  },\n  deleteAssessment: async id => {\n    set({\n      loading: true,\n      error: null\n    });\n    await latency();\n    if (maybeFail()) {\n      set({\n        error: \"Simulated delete failure\",\n        loading: false\n      });\n      throw new Error(\"Simulated delete failure\");\n    }\n    await db.assessments.delete(id);\n    set(state => ({\n      assessments: state.assessments.filter(a => a.id !== id),\n      loading: false\n    }));\n  }\n}));","map":{"version":3,"names":["create","db","seedIfNeeded","latency","min","max","Promise","r","setTimeout","Math","random","maybeFail","rate","useAssessmentStore","set","get","assessments","loading","error","init","arr","toArray","err","message","String","createAssessment","assessment","Error","id","add","rec","state","updateAssessment","patch","update","updated","map","a","deleteAssessment","delete","filter"],"sources":["C:/Users/viren/Trial 2/src/components/Assessments/useAssessmentStore.js"],"sourcesContent":["// src/store/useAssessmentStore.js\r\nimport { create } from \"zustand\";\r\nimport { db, seedIfNeeded } from \"../db\";\r\n\r\n// latency & failure helpers\r\nconst latency = (min=200, max=1200) => new Promise(r => setTimeout(r, Math.random()*(max-min)+min));\r\nconst maybeFail = (rate = 0.08) => Math.random() < rate; // ~8%\r\n\r\nexport const useAssessmentStore = create((set, get) => ({\r\n  assessments: [],\r\n  loading: false,\r\n  error: null,\r\n\r\n  init: async () => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      await seedIfNeeded();\r\n      const arr = await db.assessments.toArray();\r\n      set({ assessments: arr, loading: false });\r\n    } catch (err) {\r\n      set({ error: err.message || String(err), loading: false });\r\n    }\r\n  },\r\n\r\n  // create assessment (simulate latency + chance of failure)\r\n  createAssessment: async (assessment) => {\r\n    set({ loading: true, error: null });\r\n    await latency();\r\n    if (maybeFail()) {\r\n      set({ error: \"Network (simulated) error creating assessment\", loading: false });\r\n      throw new Error(\"Simulated create failure\");\r\n    }\r\n    const id = await db.assessments.add(assessment);\r\n    const rec = await db.assessments.get(id);\r\n    set(state => ({ assessments: [...state.assessments, rec], loading: false }));\r\n    return rec;\r\n  },\r\n\r\n  updateAssessment: async (id, patch) => {\r\n    set({ loading: true, error: null });\r\n    await latency();\r\n    if (maybeFail()) {\r\n      set({ error: \"Simulated update failure\", loading: false });\r\n      throw new Error(\"Simulated update failure\");\r\n    }\r\n    await db.assessments.update(id, patch);\r\n    const updated = await db.assessments.get(id);\r\n    set(state => ({\r\n      assessments: state.assessments.map(a => a.id === id ? updated : a),\r\n      loading: false\r\n    }));\r\n    return updated;\r\n  },\r\n\r\n  deleteAssessment: async (id) => {\r\n    set({ loading: true, error: null });\r\n    await latency();\r\n    if (maybeFail()) {\r\n      set({ error: \"Simulated delete failure\", loading: false });\r\n      throw new Error(\"Simulated delete failure\");\r\n    }\r\n    await db.assessments.delete(id);\r\n    set(state => ({ assessments: state.assessments.filter(a => a.id !== id), loading: false }));\r\n  }\r\n}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}