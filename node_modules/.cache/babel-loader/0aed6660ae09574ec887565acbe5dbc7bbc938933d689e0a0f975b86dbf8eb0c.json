{"ast":null,"code":"import { rest } from 'msw';\nimport { db } from '../db/dexie.js'; // âœ… path correct\n\n// ------------------ Helpers ------------------\nconst sleep = ms => new Promise(res => setTimeout(res, ms));\nconst maybeFail = () => Math.random() < 0.08; // ~8% failure rate\nconst makeSlug = title => title.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');\n\n// =============================================================\n// ðŸ§© JOBS HANDLERS\n// =============================================================\nexport const handlers = [\n// ------------------ GET /jobs ------------------\nrest.get('/jobs', async (req, res, ctx) => {\n  await sleep(Math.random() * 1000 + 200);\n  if (maybeFail()) return res(ctx.status(500), ctx.json({\n    message: 'Random job fetch error'\n  }));\n  const search = req.url.searchParams.get('search') || '';\n  const status = req.url.searchParams.get('status') || '';\n  const page = parseInt(req.url.searchParams.get('page') || '1');\n  const pageSize = parseInt(req.url.searchParams.get('pageSize') || '10');\n  let jobs = await db.jobs.orderBy('order').toArray();\n  if (search) jobs = jobs.filter(j => j.title.toLowerCase().includes(search.toLowerCase()));\n  if (status) jobs = jobs.filter(j => j.status === status);\n  const total = jobs.length;\n  const start = (page - 1) * pageSize;\n  const paginated = jobs.slice(start, start + pageSize);\n  return res(ctx.status(200), ctx.json({\n    data: paginated,\n    total\n  }));\n}),\n// ------------------ POST /jobs ------------------\nrest.post('/jobs', async (req, res, ctx) => {\n  await sleep(400);\n  if (maybeFail()) return res(ctx.status(500), ctx.json({\n    message: 'Random create error'\n  }));\n  const payload = await req.json();\n  if (!payload.title) return res(ctx.status(400), ctx.json({\n    message: 'Title required'\n  }));\n  const baseSlug = makeSlug(payload.title);\n  let slug = baseSlug,\n    i = 1;\n  while (await db.jobs.where('slug').equals(slug).count()) slug = `${baseSlug}-${i++}`;\n  const order = (await db.jobs.count()) + 1;\n  const jobId = await db.jobs.add({\n    ...payload,\n    slug,\n    status: payload.status || 'active',\n    order\n  });\n  const job = await db.jobs.get(jobId);\n  return res(ctx.status(201), ctx.json(job));\n}),\n// ------------------ PATCH /jobs/:id ------------------\nrest.patch('/jobs/:id', async (req, res, ctx) => {\n  await sleep(400);\n  if (maybeFail()) return res(ctx.status(500), ctx.json({\n    message: 'Random update error'\n  }));\n  const id = Number(req.params.id);\n  const updates = await req.json();\n  if (updates.title) {\n    const baseSlug = makeSlug(updates.title);\n    let slug = baseSlug,\n      i = 1;\n    while (true) {\n      const existing = await db.jobs.where('slug').equals(slug).first();\n      if (!existing || existing.id === id) break;\n      slug = `${baseSlug}-${i++}`;\n    }\n    updates.slug = slug;\n  }\n  await db.jobs.update(id, updates);\n  const updated = await db.jobs.get(id);\n  return res(ctx.status(200), ctx.json(updated));\n}),\n// ------------------ PATCH /jobs/:id/reorder ------------------\nrest.patch('/jobs/:id/reorder', async (req, res, ctx) => {\n  await sleep(400);\n  if (maybeFail()) return res(ctx.status(500), ctx.json({\n    message: 'Reorder failed'\n  }));\n  const {\n    id\n  } = req.params;\n  const {\n    fromOrder,\n    toOrder\n  } = await req.json();\n  const jobs = await db.jobs.orderBy('order').toArray();\n  const jobIndex = jobs.findIndex(j => j.id === Number(id));\n  if (jobIndex === -1) return res(ctx.status(404), ctx.json({\n    message: 'Job not found'\n  }));\n  const [moved] = jobs.splice(jobIndex, 1);\n  jobs.splice(toOrder - 1, 0, moved);\n  await db.transaction('rw', db.jobs, async () => {\n    for (let i = 0; i < jobs.length; i++) {\n      await db.jobs.update(jobs[i].id, {\n        order: i + 1\n      });\n    }\n  });\n  return res(ctx.status(200), ctx.json(await db.jobs.get(Number(id))));\n}),\n// ------------------ PATCH /jobs/:id/archive ------------------\nrest.patch('/jobs/:id/archive', async (req, res, ctx) => {\n  await sleep(400);\n  if (maybeFail()) return res(ctx.status(500), ctx.json({\n    message: 'Archive toggle failed'\n  }));\n  const id = Number(req.params.id);\n  const job = await db.jobs.get(id);\n  if (!job) return res(ctx.status(404), ctx.json({\n    message: 'Job not found'\n  }));\n  const newStatus = job.status === 'archived' ? 'active' : 'archived';\n  await db.jobs.update(id, {\n    status: newStatus\n  });\n  const updated = await db.jobs.get(id);\n  return res(ctx.status(200), ctx.json(updated));\n}),\n// =============================================================\n// ðŸ‘¥ CANDIDATES HANDLERS\n// =============================================================\nrest.get('/candidates', async (req, res, ctx) => {\n  await sleep(300);\n  if (maybeFail()) return res(ctx.status(500), ctx.json({\n    message: 'Random candidate fetch error'\n  }));\n  const search = req.url.searchParams.get('search') || '';\n  const stage = req.url.searchParams.get('stage') || '';\n  const page = parseInt(req.url.searchParams.get('page') || '1');\n  const pageSize = parseInt(req.url.searchParams.get('pageSize') || '10');\n  let candidates = await db.candidates.toArray();\n  if (search) candidates = candidates.filter(c => c.name.toLowerCase().includes(search.toLowerCase()) || c.email.toLowerCase().includes(search.toLowerCase()));\n  if (stage) candidates = candidates.filter(c => c.stage === stage);\n  const total = candidates.length;\n  const start = (page - 1) * pageSize;\n  const paginated = candidates.slice(start, start + pageSize);\n  return res(ctx.status(200), ctx.json({\n    data: paginated,\n    total\n  }));\n}), rest.patch('/candidates/:id', async (req, res, ctx) => {\n  await sleep(400);\n  if (maybeFail()) return res(ctx.status(500), ctx.json({\n    message: 'Random update error'\n  }));\n  const id = Number(req.params.id);\n  const data = await req.json();\n  const candidate = await db.candidates.get(id);\n  if (!candidate) return res(ctx.status(404), ctx.json({\n    message: 'Candidate not found'\n  }));\n  const updated = {\n    ...candidate,\n    ...data\n  };\n  await db.candidates.put(updated);\n  return res(ctx.status(200), ctx.json(updated));\n}),\n// =============================================================\n// ðŸ§  ASSESSMENTS HANDLERS\n// =============================================================\n\n// âœ… GET all assessments with questions\nrest.get('/assessments', async (req, res, ctx) => {\n  await sleep(300);\n  if (maybeFail()) return res(ctx.status(500), ctx.json({\n    message: 'Random fetch error'\n  }));\n  const assessments = await db.assessments.toArray();\n  const full = [];\n  for (const a of assessments) {\n    const questions = await db.questions.where('assessmentId').equals(a.id).toArray();\n    full.push({\n      ...a,\n      questions\n    });\n  }\n  return res(ctx.status(200), ctx.json(full));\n}),\n// âœ… GET /assessments/:id single with questions\nrest.get('/assessments/:id', async (req, res, ctx) => {\n  await sleep(300);\n  if (maybeFail()) return res(ctx.status(500), ctx.json({\n    message: 'Random fetch error'\n  }));\n  const id = Number(req.params.id);\n  const a = await db.assessments.get(id);\n  if (!a) return res(ctx.status(404), ctx.json({\n    message: 'Not found'\n  }));\n  const questions = await db.questions.where('assessmentId').equals(a.id).toArray();\n  return res(ctx.status(200), ctx.json({\n    ...a,\n    questions\n  }));\n})];","map":{"version":3,"names":["rest","db","sleep","ms","Promise","res","setTimeout","maybeFail","Math","random","makeSlug","title","toLowerCase","replace","handlers","get","req","ctx","status","json","message","search","url","searchParams","page","parseInt","pageSize","jobs","orderBy","toArray","filter","j","includes","total","length","start","paginated","slice","data","post","payload","baseSlug","slug","i","where","equals","count","order","jobId","add","job","patch","id","Number","params","updates","existing","first","update","updated","fromOrder","toOrder","jobIndex","findIndex","moved","splice","transaction","newStatus","stage","candidates","c","name","email","candidate","put","assessments","full","a","questions","push"],"sources":["C:/Users/viren/Trial 2/src/mocks/handlers.js"],"sourcesContent":["import { rest } from 'msw';\r\nimport { db } from '../db/dexie.js'; // âœ… path correct\r\n\r\n// ------------------ Helpers ------------------\r\nconst sleep = (ms) => new Promise((res) => setTimeout(res, ms));\r\nconst maybeFail = () => Math.random() < 0.08; // ~8% failure rate\r\nconst makeSlug = (title) =>\r\n  title.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');\r\n\r\n// =============================================================\r\n// ðŸ§© JOBS HANDLERS\r\n// =============================================================\r\nexport const handlers = [\r\n  // ------------------ GET /jobs ------------------\r\n  rest.get('/jobs', async (req, res, ctx) => {\r\n    await sleep(Math.random() * 1000 + 200);\r\n    if (maybeFail()) return res(ctx.status(500), ctx.json({ message: 'Random job fetch error' }));\r\n\r\n    const search = req.url.searchParams.get('search') || '';\r\n    const status = req.url.searchParams.get('status') || '';\r\n    const page = parseInt(req.url.searchParams.get('page') || '1');\r\n    const pageSize = parseInt(req.url.searchParams.get('pageSize') || '10');\r\n\r\n    let jobs = await db.jobs.orderBy('order').toArray();\r\n    if (search) jobs = jobs.filter(j => j.title.toLowerCase().includes(search.toLowerCase()));\r\n    if (status) jobs = jobs.filter(j => j.status === status);\r\n\r\n    const total = jobs.length;\r\n    const start = (page - 1) * pageSize;\r\n    const paginated = jobs.slice(start, start + pageSize);\r\n\r\n    return res(ctx.status(200), ctx.json({ data: paginated, total }));\r\n  }),\r\n\r\n  // ------------------ POST /jobs ------------------\r\n  rest.post('/jobs', async (req, res, ctx) => {\r\n    await sleep(400);\r\n    if (maybeFail()) return res(ctx.status(500), ctx.json({ message: 'Random create error' }));\r\n\r\n    const payload = await req.json();\r\n    if (!payload.title) return res(ctx.status(400), ctx.json({ message: 'Title required' }));\r\n\r\n    const baseSlug = makeSlug(payload.title);\r\n    let slug = baseSlug, i = 1;\r\n    while (await db.jobs.where('slug').equals(slug).count()) slug = `${baseSlug}-${i++}`;\r\n\r\n    const order = (await db.jobs.count()) + 1;\r\n    const jobId = await db.jobs.add({\r\n      ...payload,\r\n      slug,\r\n      status: payload.status || 'active',\r\n      order,\r\n    });\r\n\r\n    const job = await db.jobs.get(jobId);\r\n    return res(ctx.status(201), ctx.json(job));\r\n  }),\r\n\r\n  // ------------------ PATCH /jobs/:id ------------------\r\n  rest.patch('/jobs/:id', async (req, res, ctx) => {\r\n    await sleep(400);\r\n    if (maybeFail()) return res(ctx.status(500), ctx.json({ message: 'Random update error' }));\r\n\r\n    const id = Number(req.params.id);\r\n    const updates = await req.json();\r\n\r\n    if (updates.title) {\r\n      const baseSlug = makeSlug(updates.title);\r\n      let slug = baseSlug, i = 1;\r\n      while (true) {\r\n        const existing = await db.jobs.where('slug').equals(slug).first();\r\n        if (!existing || existing.id === id) break;\r\n        slug = `${baseSlug}-${i++}`;\r\n      }\r\n      updates.slug = slug;\r\n    }\r\n\r\n    await db.jobs.update(id, updates);\r\n    const updated = await db.jobs.get(id);\r\n    return res(ctx.status(200), ctx.json(updated));\r\n  }),\r\n\r\n  // ------------------ PATCH /jobs/:id/reorder ------------------\r\n  rest.patch('/jobs/:id/reorder', async (req, res, ctx) => {\r\n    await sleep(400);\r\n    if (maybeFail()) return res(ctx.status(500), ctx.json({ message: 'Reorder failed' }));\r\n\r\n    const { id } = req.params;\r\n    const { fromOrder, toOrder } = await req.json();\r\n\r\n    const jobs = await db.jobs.orderBy('order').toArray();\r\n    const jobIndex = jobs.findIndex(j => j.id === Number(id));\r\n    if (jobIndex === -1) return res(ctx.status(404), ctx.json({ message: 'Job not found' }));\r\n\r\n    const [moved] = jobs.splice(jobIndex, 1);\r\n    jobs.splice(toOrder - 1, 0, moved);\r\n\r\n    await db.transaction('rw', db.jobs, async () => {\r\n      for (let i = 0; i < jobs.length; i++) {\r\n        await db.jobs.update(jobs[i].id, { order: i + 1 });\r\n      }\r\n    });\r\n\r\n    return res(ctx.status(200), ctx.json(await db.jobs.get(Number(id))));\r\n  }),\r\n\r\n  // ------------------ PATCH /jobs/:id/archive ------------------\r\n  rest.patch('/jobs/:id/archive', async (req, res, ctx) => {\r\n    await sleep(400);\r\n    if (maybeFail()) return res(ctx.status(500), ctx.json({ message: 'Archive toggle failed' }));\r\n\r\n    const id = Number(req.params.id);\r\n    const job = await db.jobs.get(id);\r\n    if (!job) return res(ctx.status(404), ctx.json({ message: 'Job not found' }));\r\n\r\n    const newStatus = job.status === 'archived' ? 'active' : 'archived';\r\n    await db.jobs.update(id, { status: newStatus });\r\n    const updated = await db.jobs.get(id);\r\n    return res(ctx.status(200), ctx.json(updated));\r\n  }),\r\n\r\n  // =============================================================\r\n  // ðŸ‘¥ CANDIDATES HANDLERS\r\n  // =============================================================\r\n  rest.get('/candidates', async (req, res, ctx) => {\r\n    await sleep(300);\r\n    if (maybeFail()) return res(ctx.status(500), ctx.json({ message: 'Random candidate fetch error' }));\r\n\r\n    const search = req.url.searchParams.get('search') || '';\r\n    const stage = req.url.searchParams.get('stage') || '';\r\n    const page = parseInt(req.url.searchParams.get('page') || '1');\r\n    const pageSize = parseInt(req.url.searchParams.get('pageSize') || '10');\r\n\r\n    let candidates = await db.candidates.toArray();\r\n    if (search)\r\n      candidates = candidates.filter(c =>\r\n        c.name.toLowerCase().includes(search.toLowerCase()) ||\r\n        c.email.toLowerCase().includes(search.toLowerCase())\r\n      );\r\n    if (stage) candidates = candidates.filter(c => c.stage === stage);\r\n\r\n    const total = candidates.length;\r\n    const start = (page - 1) * pageSize;\r\n    const paginated = candidates.slice(start, start + pageSize);\r\n\r\n    return res(ctx.status(200), ctx.json({ data: paginated, total }));\r\n  }),\r\n\r\n  rest.patch('/candidates/:id', async (req, res, ctx) => {\r\n    await sleep(400);\r\n    if (maybeFail()) return res(ctx.status(500), ctx.json({ message: 'Random update error' }));\r\n\r\n    const id = Number(req.params.id);\r\n    const data = await req.json();\r\n    const candidate = await db.candidates.get(id);\r\n    if (!candidate) return res(ctx.status(404), ctx.json({ message: 'Candidate not found' }));\r\n\r\n    const updated = { ...candidate, ...data };\r\n    await db.candidates.put(updated);\r\n    return res(ctx.status(200), ctx.json(updated));\r\n  }),\r\n\r\n  // =============================================================\r\n  // ðŸ§  ASSESSMENTS HANDLERS\r\n  // =============================================================\r\n\r\n  // âœ… GET all assessments with questions\r\n  rest.get('/assessments', async (req, res, ctx) => {\r\n    await sleep(300);\r\n    if (maybeFail()) return res(ctx.status(500), ctx.json({ message: 'Random fetch error' }));\r\n\r\n    const assessments = await db.assessments.toArray();\r\n    const full = [];\r\n    for (const a of assessments) {\r\n      const questions = await db.questions.where('assessmentId').equals(a.id).toArray();\r\n      full.push({ ...a, questions });\r\n    }\r\n\r\n    return res(ctx.status(200), ctx.json(full));\r\n  }),\r\n\r\n  // âœ… GET /assessments/:id single with questions\r\n  rest.get('/assessments/:id', async (req, res, ctx) => {\r\n    await sleep(300);\r\n    if (maybeFail()) return res(ctx.status(500), ctx.json({ message: 'Random fetch error' }));\r\n\r\n    const id = Number(req.params.id);\r\n    const a = await db.assessments.get(id);\r\n    if (!a) return res(ctx.status(404), ctx.json({ message: 'Not found' }));\r\n\r\n    const questions = await db.questions.where('assessmentId').equals(a.id).toArray();\r\n    return res(ctx.status(200), ctx.json({ ...a, questions }));\r\n  }),\r\n];\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}