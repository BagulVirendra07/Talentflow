{"ast":null,"code":"// src/hooks/db.js\nimport Dexie from \"dexie\";\nexport const db = new Dexie(\"TalentFlowDB\");\ndb.version(1).stores({\n  assessments: \"++id, title, sections\",\n  jobs: \"++id, title, slug, status\" // ✅ jobs table added\n});\n\n// Seed sample data\nexport async function seedIfNeeded() {\n  const jobCount = await db.jobs.count();\n  if (jobCount === 0) {\n    const demoJobs = Array.from({\n      length: 25\n    }, (_, i) => ({\n      title: `Job ${i + 1}`,\n      slug: `job-${i + 1}`,\n      status: i % 2 === 0 ? \"active\" : \"archived\"\n    }));\n    await db.jobs.bulkAdd(demoJobs);\n    console.log(\"✅ Seeded 25 demo jobs (mixed active/archived)\");\n  }\n  const count = await db.assessments.count();\n  if (count > 0) return;\n\n  // ✅ keep your existing assessment seeding logic\n  const frontend = {\n    title: \"Assessment 1 — Frontend\",\n    sections: [{\n      id: 1,\n      name: \"Section 1 - Frontend\",\n      questions: Array.from({\n        length: 12\n      }, (_, q) => {\n        const i = q + 1;\n        return {\n          id: `f-${i}`,\n          label: `Question ${i} (frontend)`,\n          type: i % 5 === 1 ? \"short\" : i % 5 === 2 ? \"long\" : i % 5 === 3 ? \"numeric\" : i % 5 === 4 ? \"single-choice\" : \"multi-choice\",\n          required: i % 3 === 0,\n          maxLength: i % 5 === 2 ? 250 : undefined,\n          range: i % 5 === 3 ? {\n            min: 0,\n            max: 10\n          } : undefined,\n          options: i % 5 === 4 || i % 5 === 0 ? [\"A\", \"B\", \"C\"] : undefined,\n          condition: {\n            dependsOn: \"\",\n            value: \"\"\n          }\n        };\n      })\n    }]\n  };\n  const backend = {\n    title: \"Assessment 2 — Backend\",\n    sections: [{\n      id: 1,\n      name: \"Section 1 - Backend\",\n      questions: Array.from({\n        length: 12\n      }, (_, q) => {\n        const i = q + 1;\n        return {\n          id: `b-${i}`,\n          label: `Question ${i} (backend)`,\n          type: i % 5 === 1 ? \"short\" : i % 5 === 2 ? \"long\" : i % 5 === 3 ? \"numeric\" : i % 5 === 4 ? \"single-choice\" : \"multi-choice\",\n          required: i % 2 === 0,\n          maxLength: i % 5 === 2 ? 300 : undefined,\n          range: i % 5 === 3 ? {\n            min: 1,\n            max: 5\n          } : undefined,\n          options: i % 5 === 4 || i % 5 === 0 ? [\"Yes\", \"No\", \"Maybe\"] : undefined,\n          condition: {\n            dependsOn: \"\",\n            value: \"\"\n          }\n        };\n      })\n    }]\n  };\n  const dbs = {\n    title: \"Assessment 3 — Databases\",\n    sections: [{\n      id: 1,\n      name: \"Section 1 - Databases\",\n      questions: Array.from({\n        length: 12\n      }, (_, q) => {\n        const i = q + 1;\n        return {\n          id: `d-${i}`,\n          label: `Question ${i} (db)`,\n          type: i % 5 === 1 ? \"short\" : i % 5 === 2 ? \"long\" : i % 5 === 3 ? \"numeric\" : i % 5 === 4 ? \"single-choice\" : \"multi-choice\",\n          required: false,\n          maxLength: i % 5 === 2 ? 200 : undefined,\n          range: i % 5 === 3 ? {\n            min: 0,\n            max: 20\n          } : undefined,\n          options: i % 5 === 4 || i % 5 === 0 ? [\"Opt1\", \"Opt2\", \"Opt3\"] : undefined,\n          condition: {\n            dependsOn: \"\",\n            value: \"\"\n          }\n        };\n      })\n    }]\n  };\n  await db.assessments.bulkAdd([frontend, backend, dbs]);\n  console.log(\"✅ Seeded 3 assessments (12 questions each)\");\n}","map":{"version":3,"names":["Dexie","db","version","stores","assessments","jobs","seedIfNeeded","jobCount","count","demoJobs","Array","from","length","_","i","title","slug","status","bulkAdd","console","log","frontend","sections","id","name","questions","q","label","type","required","maxLength","undefined","range","min","max","options","condition","dependsOn","value","backend","dbs"],"sources":["C:/Users/viren/Trial 2/src/hooks/db.js"],"sourcesContent":["// src/hooks/db.js\r\nimport Dexie from \"dexie\";\r\n\r\nexport const db = new Dexie(\"TalentFlowDB\");\r\n\r\ndb.version(1).stores({\r\n  assessments: \"++id, title, sections\",\r\n  jobs: \"++id, title, slug, status\", // ✅ jobs table added\r\n});\r\n\r\n// Seed sample data\r\nexport async function seedIfNeeded() {\r\n  const jobCount = await db.jobs.count();\r\n  if (jobCount === 0) {\r\n    const demoJobs = Array.from({ length: 25 }, (_, i) => ({\r\n      title: `Job ${i + 1}`,\r\n      slug: `job-${i + 1}`,\r\n      status: i % 2 === 0 ? \"active\" : \"archived\",\r\n    }));\r\n    await db.jobs.bulkAdd(demoJobs);\r\n    console.log(\"✅ Seeded 25 demo jobs (mixed active/archived)\");\r\n  }\r\n\r\n  const count = await db.assessments.count();\r\n  if (count > 0) return;\r\n\r\n  // ✅ keep your existing assessment seeding logic\r\n  const frontend = {\r\n    title: \"Assessment 1 — Frontend\",\r\n    sections: [\r\n      {\r\n        id: 1,\r\n        name: \"Section 1 - Frontend\",\r\n        questions: Array.from({ length: 12 }, (_, q) => {\r\n          const i = q + 1;\r\n          return {\r\n            id: `f-${i}`,\r\n            label: `Question ${i} (frontend)`,\r\n            type: i % 5 === 1 ? \"short\" :\r\n                  i % 5 === 2 ? \"long\" :\r\n                  i % 5 === 3 ? \"numeric\" :\r\n                  i % 5 === 4 ? \"single-choice\" :\r\n                                \"multi-choice\",\r\n            required: i % 3 === 0,\r\n            maxLength: i % 5 === 2 ? 250 : undefined,\r\n            range: i % 5 === 3 ? { min: 0, max: 10 } : undefined,\r\n            options: (i % 5 === 4 || i % 5 === 0) ? [\"A\",\"B\",\"C\"] : undefined,\r\n            condition: { dependsOn: \"\", value: \"\" }\r\n          };\r\n        })\r\n      }\r\n    ]\r\n  };\r\n\r\n  const backend = {\r\n    title: \"Assessment 2 — Backend\",\r\n    sections: [\r\n      {\r\n        id: 1,\r\n        name: \"Section 1 - Backend\",\r\n        questions: Array.from({ length: 12 }, (_, q) => {\r\n          const i = q + 1;\r\n          return {\r\n            id: `b-${i}`,\r\n            label: `Question ${i} (backend)`,\r\n            type: i % 5 === 1 ? \"short\" :\r\n                  i % 5 === 2 ? \"long\" :\r\n                  i % 5 === 3 ? \"numeric\" :\r\n                  i % 5 === 4 ? \"single-choice\" :\r\n                                \"multi-choice\",\r\n            required: i % 2 === 0,\r\n            maxLength: i % 5 === 2 ? 300 : undefined,\r\n            range: i % 5 === 3 ? { min: 1, max: 5 } : undefined,\r\n            options: (i % 5 === 4 || i % 5 === 0) ? [\"Yes\",\"No\",\"Maybe\"] : undefined,\r\n            condition: { dependsOn: \"\", value: \"\" }\r\n          };\r\n        })\r\n      }\r\n    ]\r\n  };\r\n\r\n  const dbs = {\r\n    title: \"Assessment 3 — Databases\",\r\n    sections: [\r\n      {\r\n        id: 1,\r\n        name: \"Section 1 - Databases\",\r\n        questions: Array.from({ length: 12 }, (_, q) => {\r\n          const i = q + 1;\r\n          return {\r\n            id: `d-${i}`,\r\n            label: `Question ${i} (db)`,\r\n            type: i % 5 === 1 ? \"short\" :\r\n                  i % 5 === 2 ? \"long\" :\r\n                  i % 5 === 3 ? \"numeric\" :\r\n                  i % 5 === 4 ? \"single-choice\" :\r\n                                \"multi-choice\",\r\n            required: false,\r\n            maxLength: i % 5 === 2 ? 200 : undefined,\r\n            range: i % 5 === 3 ? { min: 0, max: 20 } : undefined,\r\n            options: (i % 5 === 4 || i % 5 === 0) ? [\"Opt1\",\"Opt2\",\"Opt3\"] : undefined,\r\n            condition: { dependsOn: \"\", value: \"\" }\r\n          };\r\n        })\r\n      }\r\n    ]\r\n  };\r\n\r\n  await db.assessments.bulkAdd([frontend, backend, dbs]);\r\n  console.log(\"✅ Seeded 3 assessments (12 questions each)\");\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}