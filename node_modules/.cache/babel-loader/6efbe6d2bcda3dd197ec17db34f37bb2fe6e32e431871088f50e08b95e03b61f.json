{"ast":null,"code":"// src/db/dexie.js\nimport Dexie from 'dexie';\n\n// Create DB\nexport const db = new Dexie('TalentFlowDB');\ndb.version(1).stores({\n  jobs: '++id, title, slug, status, tags, order',\n  candidates: '++id, name, email, stage, jobId',\n  timelines: '++id, candidateId, stage, date',\n  assessments: '++id, jobId, title',\n  questions: '++id, assessmentId, text, type, required, options, range',\n  submissions: '++id, jobId, name, answers, submittedAt'\n});\n\n// latency helper (200–1200ms)\nexport const latency = (min = 200, max = 1200) => new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * (max - min + 1)) + min));\n\n// maybeFail (7-10% write error probability)\nexport const maybeFail = (rate = 0.08) => Math.random() < rate;\n\n// Seed function — idempotent (runs only when empty)\nexport async function seedData() {\n  const jobsCount = await db.jobs.count();\n  const candidatesCount = await db.candidates.count();\n  const assessmentsCount = await db.assessments.count();\n  const questionsCount = await db.questions.count();\n\n  // Seed jobs if empty\n  if (jobsCount === 0) {\n    const statuses = ['active', 'archived'];\n    const jobs = Array.from({\n      length: 25\n    }, (_, i) => ({\n      title: `Job ${i + 1}`,\n      slug: `job-${i + 1}`,\n      status: statuses[Math.floor(Math.random() * statuses.length)],\n      tags: ['frontend', 'backend'],\n      order: i + 1\n    }));\n    await db.jobs.bulkAdd(jobs);\n    console.log('Seeded 25 jobs');\n  }\n\n  // Seed candidates if empty\n  if (candidatesCount === 0) {\n    const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\n    const candidates = Array.from({\n      length: 1000\n    }, (_, i) => ({\n      name: `Candidate ${i + 1}`,\n      email: `candidate${i + 1}@example.com`,\n      stage: stages[Math.floor(Math.random() * stages.length)],\n      jobId: Math.floor(Math.random() * 25) + 1\n    }));\n    // bulkAdd in chunks to avoid large single transaction\n    for (let i = 0; i < candidates.length; i += 200) {\n      await db.candidates.bulkAdd(candidates.slice(i, i + 200));\n    }\n    console.log('Seeded 1000 candidates');\n  }\n\n  // Seed assessments + questions if empty\n  if (assessmentsCount === 0 || questionsCount === 0) {\n    // create 3 assessments (for jobId 1..3) each with 12 questions\n    const types = ['short', 'long', 'single', 'multi', 'numeric', 'file'];\n    for (let jobId = 1; jobId <= 3; jobId++) {\n      const assessmentId = await db.assessments.add({\n        jobId,\n        title: `Assessment ${jobId}`\n      });\n      const qList = Array.from({\n        length: 12\n      }, (_, qIdx) => {\n        const t = types[qIdx % types.length];\n        const base = {\n          assessmentId,\n          text: `Question ${qIdx + 1} for Assessment ${jobId}`,\n          type: t,\n          required: Math.random() > 0.3,\n          options: null,\n          range: null\n        };\n        if (t === 'single' || t === 'multi') {\n          base.options = [`Option A`, `Option B`, `Option C`];\n        }\n        if (t === 'numeric') {\n          base.range = {\n            min: 0,\n            max: 100\n          };\n        }\n        return base;\n      });\n\n      // bulk add questions for this assessment\n      await db.questions.bulkAdd(qList);\n      console.log(`Seeded assessment ${assessmentId} with ${qList.length} questions`);\n    }\n  }\n  console.log('✅ Dexie seed completed');\n}","map":{"version":3,"names":["Dexie","db","version","stores","jobs","candidates","timelines","assessments","questions","submissions","latency","min","max","Promise","resolve","setTimeout","Math","floor","random","maybeFail","rate","seedData","jobsCount","count","candidatesCount","assessmentsCount","questionsCount","statuses","Array","from","length","_","i","title","slug","status","tags","order","bulkAdd","console","log","stages","name","email","stage","jobId","slice","types","assessmentId","add","qList","qIdx","t","base","text","type","required","options","range"],"sources":["C:/Users/viren/Trial 2/src/db/dexie.js"],"sourcesContent":["// src/db/dexie.js\r\nimport Dexie from 'dexie';\r\n\r\n// Create DB\r\nexport const db = new Dexie('TalentFlowDB');\r\n\r\ndb.version(1).stores({\r\n  jobs: '++id, title, slug, status, tags, order',\r\n  candidates: '++id, name, email, stage, jobId',\r\n  timelines: '++id, candidateId, stage, date',\r\n  assessments: '++id, jobId, title',\r\n  questions: '++id, assessmentId, text, type, required, options, range',\r\n  submissions: '++id, jobId, name, answers, submittedAt'\r\n});\r\n\r\n// latency helper (200–1200ms)\r\nexport const latency = (min = 200, max = 1200) =>\r\n  new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * (max - min + 1)) + min));\r\n\r\n// maybeFail (7-10% write error probability)\r\nexport const maybeFail = (rate = 0.08) => Math.random() < rate;\r\n\r\n// Seed function — idempotent (runs only when empty)\r\nexport async function seedData() {\r\n  const jobsCount = await db.jobs.count();\r\n  const candidatesCount = await db.candidates.count();\r\n  const assessmentsCount = await db.assessments.count();\r\n  const questionsCount = await db.questions.count();\r\n\r\n  // Seed jobs if empty\r\n  if (jobsCount === 0) {\r\n    const statuses = ['active', 'archived'];\r\n    const jobs = Array.from({ length: 25 }, (_, i) => ({\r\n      title: `Job ${i + 1}`,\r\n      slug: `job-${i + 1}`,\r\n      status: statuses[Math.floor(Math.random() * statuses.length)],\r\n      tags: ['frontend', 'backend'],\r\n      order: i + 1\r\n    }));\r\n    await db.jobs.bulkAdd(jobs);\r\n    console.log('Seeded 25 jobs');\r\n  }\r\n\r\n  // Seed candidates if empty\r\n  if (candidatesCount === 0) {\r\n    const stages = ['applied', 'screen', 'tech', 'offer', 'hired', 'rejected'];\r\n    const candidates = Array.from({ length: 1000 }, (_, i) => ({\r\n      name: `Candidate ${i + 1}`,\r\n      email: `candidate${i + 1}@example.com`,\r\n      stage: stages[Math.floor(Math.random() * stages.length)],\r\n      jobId: Math.floor(Math.random() * 25) + 1\r\n    }));\r\n    // bulkAdd in chunks to avoid large single transaction\r\n    for (let i = 0; i < candidates.length; i += 200) {\r\n      await db.candidates.bulkAdd(candidates.slice(i, i + 200));\r\n    }\r\n    console.log('Seeded 1000 candidates');\r\n  }\r\n\r\n  // Seed assessments + questions if empty\r\n  if (assessmentsCount === 0 || questionsCount === 0) {\r\n    // create 3 assessments (for jobId 1..3) each with 12 questions\r\n    const types = ['short', 'long', 'single', 'multi', 'numeric', 'file'];\r\n    for (let jobId = 1; jobId <= 3; jobId++) {\r\n      const assessmentId = await db.assessments.add({\r\n        jobId,\r\n        title: `Assessment ${jobId}`\r\n      });\r\n\r\n      const qList = Array.from({ length: 12 }, (_, qIdx) => {\r\n        const t = types[qIdx % types.length];\r\n        const base = {\r\n          assessmentId,\r\n          text: `Question ${qIdx + 1} for Assessment ${jobId}`,\r\n          type: t,\r\n          required: Math.random() > 0.3,\r\n          options: null,\r\n          range: null\r\n        };\r\n\r\n        if (t === 'single' || t === 'multi') {\r\n          base.options = [`Option A`, `Option B`, `Option C`];\r\n        }\r\n        if (t === 'numeric') {\r\n          base.range = { min: 0, max: 100 };\r\n        }\r\n        return base;\r\n      });\r\n\r\n      // bulk add questions for this assessment\r\n      await db.questions.bulkAdd(qList);\r\n      console.log(`Seeded assessment ${assessmentId} with ${qList.length} questions`);\r\n    }\r\n  }\r\n\r\n  console.log('✅ Dexie seed completed');\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}