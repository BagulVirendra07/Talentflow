{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\viren\\\\Trial 2\\\\src\\\\components\\\\Candidates\\\\KanbanBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { DndContext, closestCenter } from \"@dnd-kit/core\";\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\nimport db from \".\";\nimport SortableCandidate from \"./SortableCandidate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [\"applied\", \"screen\", \"tech\", \"offer\", \"hired\", \"rejected\"];\nexport default function KanbanBoard() {\n  _s();\n  const [candidates, setCandidates] = useState([]);\n\n  // ðŸ”¹ Seed 100 mock candidates only once\n  useEffect(() => {\n    db.candidates.toArray().then(async list => {\n      if (list.length === 0) {\n        const sample = Array.from({\n          length: 100\n        }, (_, i) => ({\n          id: i + 1,\n          name: `Candidate ${i + 1}`,\n          email: `user${i + 1}@mail.com`,\n          stage: stages[Math.floor(Math.random() * stages.length)]\n        }));\n        await db.candidates.bulkAdd(sample);\n        setCandidates(sample);\n      } else setCandidates(list);\n    });\n  }, []);\n\n  // ðŸ§© Drag & drop handling\n  const handleDragEnd = async event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over) return;\n    const candidateId = Number(active.id);\n    const newStage = over.id;\n    const updated = candidates.map(c => c.id === candidateId ? {\n      ...c,\n      stage: newStage\n    } : c);\n    await db.candidates.update(candidateId, {\n      stage: newStage\n    });\n    setCandidates(updated);\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragEnd: handleDragEnd,\n    collisionDetection: closestCenter,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"16px\",\n        overflowX: \"auto\",\n        padding: \"20px\"\n      },\n      children: stages.map(stage => /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: stage,\n        title: stage,\n        candidates: candidates.filter(c => c.stage === stage)\n      }, stage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(KanbanBoard, \"W8xvQL2/gnd29ogq8r5xz5rSiCY=\");\n_c = KanbanBoard;\nfunction KanbanColumn({\n  id,\n  title,\n  candidates\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    style: {\n      flex: \"0 0 260px\",\n      background: \"#f8f9fa\",\n      border: \"1px solid #ddd\",\n      borderRadius: 10,\n      padding: 12,\n      minHeight: 400\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textTransform: \"capitalize\",\n        marginBottom: 10,\n        fontSize: 16,\n        fontWeight: 700,\n        color: \"#333\"\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n      items: candidates.map(c => c.id),\n      strategy: verticalListSortingStrategy,\n      children: candidates.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"#999\",\n          fontStyle: \"italic\"\n        },\n        children: \"No candidates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : candidates.map(c => /*#__PURE__*/_jsxDEV(SortableCandidate, {\n        candidate: c\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 33\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_c2 = KanbanColumn;\nvar _c, _c2;\n$RefreshReg$(_c, \"KanbanBoard\");\n$RefreshReg$(_c2, \"KanbanColumn\");","map":{"version":3,"names":["React","useEffect","useState","DndContext","closestCenter","arrayMove","SortableContext","verticalListSortingStrategy","db","SortableCandidate","jsxDEV","_jsxDEV","stages","KanbanBoard","_s","candidates","setCandidates","toArray","then","list","length","sample","Array","from","_","i","id","name","email","stage","Math","floor","random","bulkAdd","handleDragEnd","event","active","over","candidateId","Number","newStage","updated","map","c","update","onDragEnd","collisionDetection","children","style","display","gap","overflowX","padding","KanbanColumn","title","filter","fileName","_jsxFileName","lineNumber","columnNumber","_c","flex","background","border","borderRadius","minHeight","textTransform","marginBottom","fontSize","fontWeight","color","items","strategy","fontStyle","candidate","_c2","$RefreshReg$"],"sources":["C:/Users/viren/Trial 2/src/components/Candidates/KanbanBoard.jsx"],"sourcesContent":["\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { DndContext, closestCenter } from \"@dnd-kit/core\";\r\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\r\nimport db from \".\";\r\nimport SortableCandidate from \"./SortableCandidate\";\r\n\r\nconst stages = [\"applied\", \"screen\", \"tech\", \"offer\", \"hired\", \"rejected\"];\r\n\r\nexport default function KanbanBoard() {\r\n  const [candidates, setCandidates] = useState([]);\r\n\r\n  // ðŸ”¹ Seed 100 mock candidates only once\r\n  useEffect(() => {\r\n    db.candidates.toArray().then(async (list) => {\r\n      if (list.length === 0) {\r\n        const sample = Array.from({ length: 100 }, (_, i) => ({\r\n          id: i + 1,\r\n          name: `Candidate ${i + 1}`,\r\n          email: `user${i + 1}@mail.com`,\r\n          stage: stages[Math.floor(Math.random() * stages.length)],\r\n        }));\r\n        await db.candidates.bulkAdd(sample);\r\n        setCandidates(sample);\r\n      } else setCandidates(list);\r\n    });\r\n  }, []);\r\n\r\n  // ðŸ§© Drag & drop handling\r\n  const handleDragEnd = async (event) => {\r\n    const { active, over } = event;\r\n    if (!over) return;\r\n\r\n    const candidateId = Number(active.id);\r\n    const newStage = over.id;\r\n    const updated = candidates.map((c) =>\r\n      c.id === candidateId ? { ...c, stage: newStage } : c\r\n    );\r\n\r\n    await db.candidates.update(candidateId, { stage: newStage });\r\n    setCandidates(updated);\r\n  };\r\n\r\n  return (\r\n    <DndContext onDragEnd={handleDragEnd} collisionDetection={closestCenter}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          gap: \"16px\",\r\n          overflowX: \"auto\",\r\n          padding: \"20px\",\r\n        }}\r\n      >\r\n        {stages.map((stage) => (\r\n          <KanbanColumn\r\n            key={stage}\r\n            id={stage}\r\n            title={stage}\r\n            candidates={candidates.filter((c) => c.stage === stage)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </DndContext>\r\n  );\r\n}\r\n\r\nfunction KanbanColumn({ id, title, candidates }) {\r\n  return (\r\n    <div\r\n      id={id}\r\n      style={{\r\n        flex: \"0 0 260px\",\r\n        background: \"#f8f9fa\",\r\n        border: \"1px solid #ddd\",\r\n        borderRadius: 10,\r\n        padding: 12,\r\n        minHeight: 400,\r\n      }}\r\n    >\r\n      <h3\r\n        style={{\r\n          textTransform: \"capitalize\",\r\n          marginBottom: 10,\r\n          fontSize: 16,\r\n          fontWeight: 700,\r\n          color: \"#333\",\r\n        }}\r\n      >\r\n        {title}\r\n      </h3>\r\n\r\n      <SortableContext\r\n        items={candidates.map((c) => c.id)}\r\n        strategy={verticalListSortingStrategy}\r\n      >\r\n        {candidates.length === 0 ? (\r\n          <p style={{ color: \"#999\", fontStyle: \"italic\" }}>No candidates</p>\r\n        ) : (\r\n          candidates.map((c) => <SortableCandidate key={c.id} candidate={c} />)\r\n        )}\r\n      </SortableContext>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}