{"ast":null,"code":"import { create } from \"zustand\";\nconst useAssessmentStore = create((set, get) => ({\n  assessments: [],\n  currentAssessment: null,\n  // Load existing assessments (simulate fetch with delay)\n  fetchAssessments: async () => {\n    await new Promise(r => setTimeout(r, 500));\n    const stored = JSON.parse(localStorage.getItem(\"assessments\") || \"[]\");\n    set({\n      assessments: stored\n    });\n  },\n  // Add a new assessment\n  addAssessment: title => {\n    const newAssessment = {\n      id: Date.now(),\n      title,\n      sections: []\n    };\n    const updated = [...get().assessments, newAssessment];\n    localStorage.setItem(\"assessments\", JSON.stringify(updated));\n    set({\n      assessments: updated,\n      currentAssessment: newAssessment\n    });\n  },\n  // Select existing assessment\n  selectAssessment: id => {\n    const found = get().assessments.find(a => a.id === id);\n    set({\n      currentAssessment: found\n    });\n  },\n  // Add a new section\n  addSection: title => {\n    const {\n      currentAssessment\n    } = get();\n    if (!currentAssessment) return;\n    const newSection = {\n      id: Date.now(),\n      title,\n      questions: []\n    };\n    const updated = {\n      ...currentAssessment,\n      sections: [...currentAssessment.sections, newSection]\n    };\n    get().updateAssessment(updated);\n  },\n  // Add question inside a section\n  addQuestion: (sectionId, question) => {\n    const {\n      currentAssessment\n    } = get();\n    const updated = {\n      ...currentAssessment,\n      sections: currentAssessment.sections.map(s => s.id === sectionId ? {\n        ...s,\n        questions: [...s.questions, {\n          id: Date.now(),\n          ...question\n        }]\n      } : s)\n    };\n    get().updateAssessment(updated);\n  },\n  // Update assessment (persist)\n  updateAssessment: updatedAssessment => {\n    const updatedList = get().assessments.map(a => a.id === updatedAssessment.id ? updatedAssessment : a);\n    localStorage.setItem(\"assessments\", JSON.stringify(updatedList));\n    set({\n      assessments: updatedList,\n      currentAssessment: updatedAssessment\n    });\n  },\n  // Delete assessment\n  deleteAssessment: id => {\n    const filtered = get().assessments.filter(a => a.id !== id);\n    localStorage.setItem(\"assessments\", JSON.stringify(filtered));\n    set({\n      assessments: filtered,\n      currentAssessment: null\n    });\n  }\n}));\nexport default useAssessmentStore;","map":{"version":3,"names":["create","useAssessmentStore","set","get","assessments","currentAssessment","fetchAssessments","Promise","r","setTimeout","stored","JSON","parse","localStorage","getItem","addAssessment","title","newAssessment","id","Date","now","sections","updated","setItem","stringify","selectAssessment","found","find","a","addSection","newSection","questions","updateAssessment","addQuestion","sectionId","question","map","s","updatedAssessment","updatedList","deleteAssessment","filtered","filter"],"sources":["C:/Users/viren/Trial 2/src/components/Assessments/useAssessmentStore.js"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nconst useAssessmentStore = create((set, get) => ({\r\n  assessments: [],\r\n  currentAssessment: null,\r\n\r\n  // Load existing assessments (simulate fetch with delay)\r\n  fetchAssessments: async () => {\r\n    await new Promise((r) => setTimeout(r, 500));\r\n    const stored = JSON.parse(localStorage.getItem(\"assessments\") || \"[]\");\r\n    set({ assessments: stored });\r\n  },\r\n\r\n  // Add a new assessment\r\n  addAssessment: (title) => {\r\n    const newAssessment = {\r\n      id: Date.now(),\r\n      title,\r\n      sections: [],\r\n    };\r\n    const updated = [...get().assessments, newAssessment];\r\n    localStorage.setItem(\"assessments\", JSON.stringify(updated));\r\n    set({ assessments: updated, currentAssessment: newAssessment });\r\n  },\r\n\r\n  // Select existing assessment\r\n  selectAssessment: (id) => {\r\n    const found = get().assessments.find((a) => a.id === id);\r\n    set({ currentAssessment: found });\r\n  },\r\n\r\n  // Add a new section\r\n  addSection: (title) => {\r\n    const { currentAssessment } = get();\r\n    if (!currentAssessment) return;\r\n    const newSection = { id: Date.now(), title, questions: [] };\r\n    const updated = {\r\n      ...currentAssessment,\r\n      sections: [...currentAssessment.sections, newSection],\r\n    };\r\n    get().updateAssessment(updated);\r\n  },\r\n\r\n  // Add question inside a section\r\n  addQuestion: (sectionId, question) => {\r\n    const { currentAssessment } = get();\r\n    const updated = {\r\n      ...currentAssessment,\r\n      sections: currentAssessment.sections.map((s) =>\r\n        s.id === sectionId\r\n          ? { ...s, questions: [...s.questions, { id: Date.now(), ...question }] }\r\n          : s\r\n      ),\r\n    };\r\n    get().updateAssessment(updated);\r\n  },\r\n\r\n  // Update assessment (persist)\r\n  updateAssessment: (updatedAssessment) => {\r\n    const updatedList = get().assessments.map((a) =>\r\n      a.id === updatedAssessment.id ? updatedAssessment : a\r\n    );\r\n    localStorage.setItem(\"assessments\", JSON.stringify(updatedList));\r\n    set({ assessments: updatedList, currentAssessment: updatedAssessment });\r\n  },\r\n\r\n  // Delete assessment\r\n  deleteAssessment: (id) => {\r\n    const filtered = get().assessments.filter((a) => a.id !== id);\r\n    localStorage.setItem(\"assessments\", JSON.stringify(filtered));\r\n    set({ assessments: filtered, currentAssessment: null });\r\n  },\r\n}));\r\n\r\nexport default useAssessmentStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}